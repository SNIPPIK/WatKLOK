import {Command} from "../Constructor";
import {wMessage} from "../../Core/Utils/TypesHelper";
import {Queue} from "../../Modules/Music/src/Manager/Queue/Structures/Queue";

export class CommandLoop extends Command {
    public constructor() {
        super({
            name: "loop",
            aliases: ["repeat", "rept"],
            description: '–í–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞',

            options: [
                {
                    name: "type",
                    description: "Type - (song, on, off)",
                    type: "STRING"
                }
            ],
            slash: true,
            enable: true,
        })
    };

    public run = async (message: wMessage, args: string[]): Promise<void> => {
        const queue: Queue = message.client.queue.get(message.guild.id);

        if (queue && queue.channels.voice && message.member.voice.channel.id !== queue.channels.voice.id) return message.client.Send({
            text: `${message.author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.channels.voice.id}>`,
            message,
            color: 'RED'
        });

        if (!message.member.voice.channel || !message.member.voice) return message.client.Send({
            text: `${message.author}, –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`,
            message,
            color: 'RED'
        });

        if (!queue) return message.client.Send({
            text: `${message.author}, ‚ö† | –ú—É–∑—ã–∫–∞ —â–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`,
            message,
            color: 'RED'
        });

        switch (args[0]) {
            case '–≤—ã–∫–ª':
            case 'off':
                queue.options.loop = "off";
                return message.client.Send({text: `‚ùå | –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω`, message, type: 'css'});

            case '–≤–∫–ª':
            case 'on':
                queue.options.loop = "songs";
                return message.client.Send({text: `üîÅ | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –º—É–∑—ã–∫–∏`, message, type: 'css'});

            case 'one':
            case '1':
            case 'song':
                queue.options.loop = "song";
                void queue.events.message.emit("update", queue.channels.message);
                return message.client.Send({
                    text: `üîÇ | –ü–æ–≤—Ç–æ—Ä  | ${queue.songs[0].title}`,
                    message,
                    type: 'css',
                    color: queue.songs[0].color
                });
            default:
                queue.options.loop = queue.options.loop !== "songs" ? "songs" : "off";

                let loop = null;
                if (queue.options.loop === "songs") loop = '–≤—Å–µ–π –º—É–∑—ã–∫–∏';
                else if (queue.options.loop === "off") loop = '–≤—ã–∫–ª';
                else if (queue.options.loop === "song") loop = '–æ–¥–Ω–æ–π –º—É–∑—ã–∫–∏';
                return message.client.Send({text: `üé∂ | –ü–æ–≤—Ç–æ—Ä ${loop}`, message, type: 'css'});
        }
    };
}