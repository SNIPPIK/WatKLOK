import {TypedEmitter} from "tiny-typed-emitter";
import {Song} from "./Structures/Song";
import {Queue} from "./Structures/Queue";
import {Disconnect} from "../Voice/VoiceManager";
import {ClientMessage} from "../../Client";

type EventsQueue = {
    DestroyQueue: (queue: Queue, message: ClientMessage, sendDelQueue?: boolean) => Promise<NodeJS.Timeout>,
    pushSong: (song: Song, message: ClientMessage) => Promise<number | null>
};
export type Queue_Channels = Queue["channels"];
export type Queue_Options = Queue["options"];

export class QueueEvents extends TypedEmitter<EventsQueue> {
    public constructor() {
        super();
        this.once('DestroyQueue', onDestroyQueue);
        this.on('pushSong', onPushSong);
        this.setMaxListeners(2);
    };

    public destroy = () => {
        this.removeAllListeners();
    };
}
/**
 * @description –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
 * @param song {object}
 * @param message {object}
 */
async function onPushSong(song: Song, {client, guild}: ClientMessage): Promise<number | null> {
    const queue: Queue = client.queue.get(guild.id);

    if (!queue) return null;
    queue.songs.push(song);
    return null;
}
/**
 * @description –£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
 * @param queue {object} –û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
 * @param message {object} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param sendDelQueue {boolean} –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
 */
async function onDestroyQueue(queue: Queue, message: ClientMessage, sendDelQueue: boolean = true): Promise<NodeJS.Timeout> {
    if (!queue) return null;

    await DeleteMessage(queue.channels);
    await LeaveVoice(queue?.channels?.message?.guild.id);
    await CleanPlayer(queue);
    if (sendDelQueue) await SendChannelToEnd(queue.options, message);

    delete queue.songs;
    delete queue.audioFilters;
    delete queue.options;

    delete queue.channels;

    queue.events.queue.destroy();
    queue.events.helper.destroy();
    queue.events.message.destroy();
    delete queue.events;

    return DeleteQueue(message);
}
/**
 * @description –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ player
 * @param queue {Queue}
 */
async function CleanPlayer(queue: Queue): Promise<void> {
    if (queue.player.state.resource) void queue.player.state.resource.playStream.emit('close');

    queue.player?.stop();

    setTimeout(() => {
        queue.player?.removeAllListeners();
        queue.player.destroy();
        delete queue.player;
    }, 7e3);
    return;
}
/**
 * @description –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
 * @param GuildID {string} ID —Å–µ—Ä–≤–µ—Ä–∞
 */
async function LeaveVoice(GuildID: string): Promise<void> {
    return Disconnect(GuildID);
}
/**
 * @description –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–µ
 * @param channels {Queue_Channels} –í—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
 */
async function DeleteMessage({message}: Queue_Channels): Promise<NodeJS.Timeout> {
    return setTimeout(async () => message?.deletable ? message?.delete().catch(() => undefined) : null, 3e3);
}
/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –º—É–∑—ã–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
 * @param options {Queue_Options} –û–ø—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 */
async function SendChannelToEnd({stop}: Queue_Options, message: ClientMessage): Promise<void> {
    if (stop) return message.client.Send({text: `üéµ | –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞`, message: message, type: 'css'});
    return message.client.Send({text: `üéµ | –ú—É–∑—ã–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å`, message: message, type: 'css'});
}
/**
 * @description –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 */
async function DeleteQueue(message: ClientMessage): Promise<NodeJS.Timeout> {
    return setTimeout(async () => {
        message.client.console(`[${message.guild.id}]: [Queue]: [Method: Delete]`);
        return message.client.queue.delete(message.guild.id);
    }, 1);
}