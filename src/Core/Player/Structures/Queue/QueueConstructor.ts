import {VoiceChannel} from "discord.js";
import {EventEmitter} from "node:events";
import {ClientMessage} from "../../../Client";
import {InputPlaylist, InputTrack} from "../../../Utils/TypeHelper";
import {Queue} from "./Queue";
import {Song} from "./Song";
import {Voice} from "../Voice";
import {MessagePlayer} from "../../Manager/MessagePlayer";

/**
 * –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –æ—á–µ—Ä–µ–¥—å—é (–≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è)
 */
export namespace QueueConstructor {
    /**
     * @description –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Å –æ—á–µ—Ä–µ–¥—å—é
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param VoiceChannel {VoiceChannel} –ö –∫–∞–∫–æ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞–¥–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è
     * @param info {InputTrack | InputPlaylist} –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç?
     * @constructor
     */
    export function CheckQueue(message: ClientMessage, VoiceChannel: VoiceChannel, info: InputTrack | InputPlaylist) {
        const Queue = CreateQueue(message, VoiceChannel);

        //–ï—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç
        if ("items" in info) {
            MessagePlayer.pushPlaylist(message, info);
            setImmediate(() => info.items.forEach((track) => PushSong(Queue, track, false)));
            return;
        }

        //–î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥—å
        PushSong(Queue, info, Queue.songs.length >= 1);
        if (Queue.songs.length === 1) return Queue.player.PlayCallback(message);
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤—ã–¥–∞–µ–º
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param VoiceChannel {VoiceChannel} –ö –∫–∞–∫–æ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞–¥–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è
 * @constructor
 */
function CreateQueue(message: ClientMessage, VoiceChannel: VoiceChannel) {
    const {client, guild} = message;
    const queue = client.queue.get(guild.id);

    if (queue) return queue;

    //–°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    const GuildQueue = new Queue(message, VoiceChannel);
    const connection = Voice.Join(VoiceChannel);

    GuildQueue.channels.connection = connection;
    GuildQueue.player.subscribe(connection);

    client.queue.set(guild.id, GuildQueue); //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –≤ <client.queue>

    return GuildQueue;
}
//====================== ====================== ====================== ======================
/**
 * @description –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É –≤ –±–∞–∑—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
 * @param queue {Queue} –û—á–µ—Ä–µ–¥—å —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param InputTrack {InputTrack} –°–∞–º —Ç—Ä–µ–∫
 * @param sendMessage {boolean} –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?
 */
function PushSong(queue: Queue, InputTrack: InputTrack, sendMessage: boolean = true): void {
    const song: Song = new Song(InputTrack, queue.channels.message);

    queue.songs.push(song);
    if (sendMessage) setImmediate(() => MessagePlayer.pushSong(queue.channels.message, song));
}
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
/**
 * @description –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã —É–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–¥–∏–Ω —Ä–∞–∑)
 */
export class QueueEvents extends EventEmitter {
    public constructor() {
        super();
        this.once("DeleteQueue", onDeleteQueue);
        this.setMaxListeners(1);
    };
}
//====================== ====================== ====================== ======================
/**
 * @description –£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param sendDelQueue {boolean} –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
 */
function onDeleteQueue(message: ClientMessage, sendDelQueue: boolean = true) {
    const {client, guild} = message;
    const Queue = client.queue.get(guild.id);

    //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
    if (!Queue) return;

    //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
    if (Queue.channels.message?.deletable) Queue.channels.message?.delete().catch(() => undefined);
    if (Queue.player) Queue.player.stop();
    if (Queue.events.voice) Queue.events.voice.destroy();


    if (sendDelQueue) {
        if (Queue.options.stop) sendMessage(message, "üéµ | –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞");
        else sendMessage(message, "üéµ | –ú—É–∑—ã–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å");
    }

    client.queue.delete(guild.id);
}
//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
function sendMessage(message: ClientMessage, text: string) {
    return message.client.Send({text, message, type: "css"});
}

export interface QueueEvents extends EventEmitter {
    DeleteQueue: (message: ClientMessage, sendDelQueue?: boolean) => boolean | void,
}