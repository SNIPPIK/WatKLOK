import {FullTimeSongs} from "../../Manager/Duration/FullTimeSongs";
import {Song} from "../Queue/Song";
import {Queue} from "../Queue/Queue";
import {AudioPlayer} from "../../Audio/AudioPlayer";
import {ParserTimeSong} from "../../Manager/Duration/ParserTimeSong";
import {NotFound, NotImage, NotVer, Ver} from "./Helper";
import {WatKLOK} from "../../../Client";
import {EmbedConstructor} from "../../../Utils/TypeHelper";
import {AudioFilters} from "../../FFmpeg";

const ProgressBarValue = true;

/**
 * @description Embed —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
 * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
 * @param song {Song} –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
 * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
 */
export function CurrentPlay(client: WatKLOK, song: Song, queue: Queue): EmbedConstructor {
    return {
        color: song.color,
        author: {
            name: client.ConvertedText(song.author.title, 45, false),
            iconURL: song.author.isVerified === undefined ? NotFound : song.author.isVerified ? Ver : NotVer,
            url: song.author.url,
        },
        thumbnail: {
            url: song.author?.image?.url ?? NotImage,
        },
        fields: createFields(song, queue, client),
        image: {
            url: song.image?.url ?? null
        },
        //timestamp: new Date(),
        footer: {
            text: `${song.requester.username} | ${FullTimeSongs(queue)} | üé∂: ${queue.songs.length} | –ü–æ–≤—Ç–æ—Ä: ${queue.options.loop}`,
            iconURL: song.requester.displayAvatarURL(),
        }
    };
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º Embed<Fields>
 * @param song {Song} –¢—Ä–µ–∫
 * @param player {Queue<player>} –ü–ª–µ–µ—Ä
 * @param songs {Queue<songs>>} –í—Å–µ —Ç—Ä–µ–∫–∏
 * @param audioFilters
 * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
 */
function createFields(song: Song, {player, songs, audioFilters}: Queue, client: WatKLOK): { name: string, value: string }[] {
    const PlayingDuration = ConvertCurrentTime(player, audioFilters);
    const DurationMusic = MusicDuration(song, PlayingDuration);

    let fields = [{
        name: `–©–∞—Å –∏–≥—Ä–∞–µ—Ç`,
        value: `**‚ùØ** [${client.ConvertedText(song.title, 29, true)}](${song.url})\n${DurationMusic}`
    }];
    if (songs[1]) fields.push({ name: `–ü–æ—Ç–æ–º`, value: `**‚ùØ** [${client.ConvertedText(songs[1].title, 29, true)}](${songs[1].url})` });
    return fields;
}
//====================== ====================== ====================== ======================
/**
 * @description
 * @param isLive {Song<isLive>} –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫, —Å—Ç—Ä–∏–º?
 * @param duration {Song<duration>} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
 * @param curTime {number | string} –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
 */
function MusicDuration({isLive, duration}: Song, curTime: number | string): string {
    if (isLive) return `[${duration.StringTime}]`;

    const str = `${duration.StringTime}]`;
    const parsedTimeSong = ParserTimeSong(curTime as number);
    const progress = ProgressBar(curTime as number, duration.seconds, 15);

    if (ProgressBarValue) return `**‚ùØ** [${parsedTimeSong} - ${str}\n${progress}`;
    return `**‚ùØ** [${curTime} - ${str}`;
}
//====================== ====================== ====================== ======================
/**
 * @description –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ –ø–ª–µ–µ—Ä–æ–º
 * @param state {audioPlayer<state>} –°—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞
 * @param filters {AudioFilters}
 * @constructor
 */
function ConvertCurrentTime({state}: AudioPlayer, filters: AudioFilters): number | string {
    const duration = state.resource?.playbackDuration ?? 0;
    let seconds: number;

    if (filters.speed) seconds = parseInt(((duration / 1000) * filters.speed).toFixed(0));
    else if (filters.nightcore) seconds = parseInt(((duration / 1000) * 1.25).toFixed(0));
    else if (filters.Vw) seconds = parseInt(((duration / 1000) * 0.8).toFixed(0));
    else seconds = parseInt((duration / 1000).toFixed(0));

    if (ProgressBarValue) return seconds;
    return ParserTimeSong(seconds);
}
//====================== ====================== ====================== ======================
/**
 * @description –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
 * @param currentTime {number} –¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º—è
 * @param maxTime {number} –ú–∞–∫—Å –≤—Ä–µ–º–µ–Ω–∏
 * @param size {number} –ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
 */
function ProgressBar(currentTime: number, maxTime: number, size: number = 15): string {
    const progressSize = Math.round(size * (currentTime / maxTime));
    const emptySize = size - progressSize;

    const progressText = "‚îÄ".repeat(progressSize); //Old: "‚ñà"
    const emptyText = "‚îÄ".repeat(emptySize); //Old:

    return `${progressText}‚ö™${emptyText}`;
}