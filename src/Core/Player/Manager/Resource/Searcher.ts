import {Song} from "../../Structures/Queue/Song";
import {httpsClient, httpsClientOptions} from "../../../httpsClient";
import {FFmpegFormat, InputFormat, InputPlaylist, InputTrack} from "../../../Utils/TypeHelper";
import {SoundCloud, Spotify, VK, YouTube} from "../../../Platforms";
import {IncomingMessage} from "http";
import {DurationUtils} from "../DurationUtils";
import {ClientMessage} from "../../../Client";
import {MessageCollector, MessageReaction, StageChannel, User, VoiceChannel} from "discord.js";
import {Images} from "../../Structures/EmbedMessages";
import {FFmpeg} from "../../Structures/Media/FFmpeg";

const youtubeStr = /^(https?:\/\/)?(www\.)?(m\.)?(music\.)?( )?(youtube\.com|youtu\.?be)\/.+$/gi;
const spotifySrt = /^(https?:\/\/)?(open\.)?(m\.)?(spotify\.com|spotify\.?ru)\/.+$/gi;
const SoundCloudSrt = /^(?:(https?):\/\/)?(?:(?:www|m)\.)?(api\.soundcloud\.com|soundcloud\.com|snd\.sc)\/(.*)$/;
const UrlSrt = /^(https?:\/\/)/gi;

//–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
type TypeFindTrack = "track" | "playlist" | "search" | "album";
//–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
type TypeSearch = "yt" | "sp" | "vk" | "sc" | "ds";
//–î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
interface Options {
    type?: TypeFindTrack
    platform?: TypeSearch
    search: string
    message: ClientMessage
    voiceChannel: VoiceChannel | StageChannel
}


const GlobalOptions: httpsClientOptions = {request: {method: "HEAD"}};
//–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
const localPlatform = {
    //YouTube
    "yt": {
        "track": (search: string): Promise<InputTrack> => YouTube.getVideo(search) as Promise<InputTrack>,
        "playlist": (search: string): Promise<InputPlaylist> => YouTube.getPlaylist(search),
        "search": (search: string): Promise<InputTrack[]> => YouTube.SearchVideos(search),
        "album": (): null => null
    },
    //Spotify
    "sp": {
        "track": (search: string): Promise<InputTrack> => Spotify.getTrack(search),
        "playlist": (search: string): Promise<InputPlaylist> => Spotify.getPlaylist(search),
        "search": (search: string): Promise<InputTrack[]> => Spotify.SearchTracks(search),
        "album": (search: string): Promise<InputPlaylist> => Spotify.getAlbum(search)
    },
    //SoundCloud
    "sc": {
        "track": (search: string): Promise<InputTrack> => SoundCloud.getTrack(search),
        "playlist": (search: string): Promise<InputPlaylist | InputTrack> => SoundCloud.getPlaylist(search),
        "search": (search: string): Promise<InputTrack[]> => SoundCloud.SearchTracks(search),
        "album": (search: string): Promise<InputPlaylist | InputTrack> => SoundCloud.getPlaylist(search)
    },
    //VK
    "vk": {
        "track": (search: string): Promise<InputTrack> => VK.getTrack(search),
        "playlist": (search: string): Promise<InputPlaylist> => VK.getPlaylist(search),
        "search": (search: string): Promise<InputTrack[]> => VK.SearchTracks(search),
        "album": (): null => null
    },
    //Discord
    "ds": {
        "track": (search: string): Promise<InputTrack> => new FFmpeg.FFprobe(["-i", search]).getInfo().then((trackInfo: any) => {
            //–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–≤—É–∫–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞
            if (!trackInfo) return null;

            return {
                url: search,
                title: search.split("/").pop(),
                author: null,
                image: {url: Images.NotImage},
                duration: {seconds: trackInfo.format.duration},
                format: {url: trackInfo.format.filename}
            };
        }),
        "playlist": (): null => null,
        "search": (): null => null,
        "album": (): null => null
    }
}
/**
 * –ò—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–µ–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞
 */
export namespace Searcher {
    /**
     * @description –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Ç–∏–ø–∞, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å!
     * @param options {options} –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @requires {SearchMessage, ArrayToString}
     * @constructor
     */
    export function toPlayer(options: Options): void {
        const {search, message, voiceChannel} = options;
        const type: TypeFindTrack = typeSong(search);
        const platform: TypeSearch = PlatformSong(search, message);
        const searchEnd = type === "search" && search?.match(platform) ? search.split(platform)[1] : search;

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞
        if (!message.attachments?.last()?.url) message.client.Send({ text: `–ü–æ–∏—Å–∫ üîç | ${search}`, message, color: "YELLOW", type: "css" });

        //–ò—â–µ–º –≤ –±–∞–∑–µ –∑–∞–ø—Ä–æ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∏ —Ç–∏–ø–æ–º
        const promise = localPlatform[platform][type](searchEnd);

        if (promise) {
            //
            promise.then((info: InputTrack | InputPlaylist | InputTrack[]) => {
                if (!info) return message.client.Send({text: `${message.author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã!`, color: "YELLOW", message});

                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –ø–æ–∏—Å–∫
                if (info instanceof Array) return SearchMessage(info, ArrayToString(info, message, platform), info.length, {...options, platform, type});

                //–°–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –±—ã–ª –Ω–∞–π–¥–µ–Ω
                if (type !== "playlist") message.client.Send({ text: `–ù–∞–π–¥–µ–Ω üîç | ${type} | ${info.title}`, message, color: "YELLOW", type: "css" });

                //–ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç
                return message.client.player.emit("play", message, voiceChannel, info);
            });
            //–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
            promise.catch((err) => message.client.Send({text: `${message.author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã! Error: ${err}`, color: "RED", message}));
            return;
        }
        return message.client.Send({text: `${message.author}, —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!`, color: "RED", message});
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å —Ç—Ä–µ–∫–∞
     * @param song {Song} –¢—Ä–µ–∫
     * @param req {number} –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
     */
    export function getResourceSong(song: Song, req = 1): Promise<Song["format"] | null> {
        return new Promise(async (resolve) => {
            if (req > 2) return resolve(null);

            const CheckResource = await ResourceSong.CheckHeadResource(song);

            //–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ—Å—É—Ä—Å
            if (!CheckResource || !song.format?.url) {
                req++;
                return resolve(getResourceSong(song, req));
            }
            return resolve(song.format);
        });
    }
}

//–§—É–Ω–∫—Ü–∏–∏ getResourceSong
namespace ResourceSong {
    /**
     * @description –ò—â–µ—Ç —Ç—Ä–µ–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
     * @param song {Song} –¢—Ä–µ–∫
     */
    export function CheckHeadResource(song: Song): Promise<boolean> {
        return new Promise(async (resolve) => {
            if (!song.format || !song.format?.url) {
                let format = await getFormatSong(song);

                if (!format || !format?.url) {
                    song.format = {url: null};
                    return resolve(false);
                }
                //–î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç—Ä–µ–∫
                song.format = {url: format.url};
            }

            //–î–µ–ª–∞–µ–º head –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const resource = await CheckLink(song.format?.url);
            if (resource === "Fail") { //–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
                song.format = {url: null};
                return resolve(false);
            }
            return resolve(true);
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É
     * @param url {string} –°—Å—ã–ª–∫–∞
     * @constructor
     */
    function CheckLink(url: string) {
        if (!url) return "Fail";

        return httpsClient.Request(url, GlobalOptions).then((resource: IncomingMessage) => {
            if (resource instanceof Error) return "Fail"; //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
            if (resource.statusCode >= 200 && resource.statusCode < 400) return "OK"; //–ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å
            return "Fail"; //–ï—Å–ª–∏ –ø—Ä–æ—à–ª—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, —Ç–æ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—á–∞—è
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∞
     * @param song {Song} –¢—Ä–µ–∫
     * @requires {FindTrack, getFormatYouTube}
     */
    function getFormatSong({type, url, title, author, duration}: Song): Promise<InputFormat | FFmpegFormat> {
        try {
            switch (type) {
                case "SPOTIFY": return FindTrack(`${author.title} - ${title}`, duration.seconds);
                case "SOUNDCLOUD": return SoundCloud.getTrack(url).then((d) => d?.format);
                case "VK": return VK.getTrack(url).then((d) => d?.format);
                case "YOUTUBE": return getFormatYouTube(url);
                default: return null
            }
        } catch {
            console.log("[FindResource]: Fail to found format");
            return null;
        }
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ò—â–µ–º —Ç—Ä–µ–∫ –Ω–∞ youtube
     * @param nameSong {string} –ù–∞–∑–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
     * @param duration
     * @requires {getFormatYouTube}
     * @constructor
     */
    function FindTrack(nameSong: string, duration: number): Promise<InputFormat> {
        return YouTube.SearchVideos(nameSong, {limit: 15}).then((Tracks) => {
            //–§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –æ–ø –≤—Ä–µ–º–µ–Ω–∏
            const FindTracks = Tracks.filter((track) => {
                const DurationSong = DurationUtils.ParsingTimeToNumber(track.duration.seconds);

                //–ö–∞–∫ –Ω–∞–¥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–∏
                return DurationSong === duration || DurationSong < duration + 10 && DurationSong > duration - 10;
            });

            //–ï—Å–ª–∏ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç
            if (FindTracks.length === 0) return null;

            //–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ
            return getFormatYouTube(FindTracks[0].url);
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –æ—Ç –≤–∏–¥–µ–æ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç
     * @param url {string} –°—Å—ã–ª–∫–∞
     */
    function getFormatYouTube(url: string): Promise<InputFormat> {
        return YouTube.getVideo(url, {onlyFormats: true}) as Promise<InputFormat>;
    }
}

//====================== ====================== ====================== ======================
//–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Searcher.toPlayer
//====================== ====================== ====================== ======================
/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
 * @param results {any[]} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 * @param resp {string} –°—Ç—Ä–æ–∫–∞ —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–µ–∫–∞–º–∏
 * @param num {number} –ö–æ–ª-–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
 * @param options {Options}
 * @requires {Reaction, CreateMessageCollector, deleteMessage, Searcher}
 * @constructor
 */
function SearchMessage(results: InputTrack[], resp: string, num: number, options: Options): void {
    const {message, platform} = options;

    setImmediate(() => {
        if (results.length < 1) return message.client.Send({text: `${message.author} | –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!`, message, color: "RED"});

        const ConstFind = `–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ ${results.length}`; //–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å —Ç—Ä–µ–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        const Requester = `[–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform} | –ó–∞–ø—Ä–æ—Å–∏–ª: ${message.author.username}]`; //–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —Ç–æ–≥–æ –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message.channel.send(`\`\`\`css\n${ConstFind}\n${Requester}\n\n${resp}\`\`\``).then((msg: ClientMessage) => {
            //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
            const collector = CreateMessageCollector(msg, message, num);

            //–î–µ–ª–∞–µ–º —á—Ç–æ-–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏ —É–¥–∞–ª—è–ª—Å—è —Å–±–æ—Ä—â–∏–∫
            Reaction(msg, message, "‚ùå", () => {
                deleteMessage(msg); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                collector?.stop();
            });

            //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —á–∏—Å–ª–∞
            collector.once("collect", (m: any): void => {
                setImmediate(() => {
                    [msg, m].forEach((m: ClientMessage) => deleteMessage(m)); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    collector?.stop(); //–£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–±–æ—Ä—â–∏–∫

                    //–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∑–∞—Ç–µ–º –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
                    const url = results[parseInt(m.content) - 1].url;
                    return Searcher.toPlayer({...options, type: "track", search: url})
                });
            });

            return;
        });
    });
}
//====================== ====================== ====================== ======================
/**
 * @description –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
 * @param msg {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç–∞
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param emoji {string} —Å–∞–º —ç–º–æ–¥–∑–∏
 * @param callback {Function} –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏
 * @constructor
 */
function Reaction(msg: ClientMessage, message: ClientMessage, emoji: string, callback: Function): void {
    setImmediate(() => {
        //–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        msg.react(emoji).then(() => {
            const collector = msg.createReactionCollector({
                filter: (reaction: MessageReaction, user: User) => (reaction.emoji.name === emoji && user.id !== message.client.user.id),
                max: 1,
                time: 60e3 //–ß–µ—Ä–µ–∑ 1 –º–∏–Ω —Å–±–æ—Ä—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
            });
            //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é
            collector.once("collect", () => {
                collector?.stop();
                return callback();
            });
        });
    });
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (discord.js) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param msg {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç–∞
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param num {number} –ö–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤
 * @constructor
 */
function CreateMessageCollector(msg: ClientMessage, message: ClientMessage, num: number): MessageCollector {
    //–°–±–æ—Ä—â–∏–∫ —á–∏—Å–µ–ª, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    return msg.channel.createMessageCollector({
        filter: (m: any) => !isNaN(m.content) && m.content <= num && m.content > 0 && m.author.id === message.author.id,
        max: 1,
        time: 60e3 //–ß–µ—Ä–µ–∑ 1 –º–∏–Ω —Å–±–æ—Ä—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    });
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ <string>
 * @param results {any[]} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @param type {TypeSearch} –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫–∞–ª–∏
 * @requires {ParsingTimeToString}
 * @constructor
 */
function ArrayToString(results: InputTrack[], message: ClientMessage, type: TypeSearch): string {
    let NumberTrack = 1, StringTracks;

    // @ts-ignore
    results.ArraySort(15).forEach((tracks: InputTrack[]) => {
        StringTracks = tracks.map((track) => {
            const Duration = type === "yt" ? track.duration.seconds : DurationUtils.ParsingTimeToString(parseInt(track.duration.seconds)); //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
            const NameTrack = `[${message.client.replaceText(track.title, 80, true)}]`; //–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            const DurationTrack = `[${Duration ?? "LIVE"}]`; //–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
            const AuthorTrack = `[${message.client.replaceText(track.author.title, 12, true)}]`; //–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞

            return `${NumberTrack++} ‚ûú ${DurationTrack} | ${AuthorTrack} | ${NameTrack}`;
        }).join("\n");
    });
    return StringTracks;
}
//====================== ====================== ====================== ======================
/**
 * @description –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param msg {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
 */
function deleteMessage(msg: ClientMessage): void {
    setTimeout(() => msg.delete().catch(() => null), 1e3);
}
//====================== ====================== ====================== ======================
/**
 * @description –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏
 * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @private
 */
function typeSong(search: string) {
    if (!search) return "track"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

    if (search.match(/playlist/)) return "playlist";
    else if (search.match(/album/) || search.match(/sets/)) return "album";
    else if (search.match(UrlSrt)) return "track";
    return "search";
}
//====================== ====================== ====================== ======================
/**
 * @description –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @private
 */
function PlatformSong(search: string, message: ClientMessage): TypeSearch {
    if (!search) return "ds"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

    if (search.match(UrlSrt)) {
        if (search.match(youtubeStr)) return "yt";
        else if (search.match(spotifySrt)) return "sp";
        else if (search.match(/vk.com/)) return "vk";
        else if (search.match(SoundCloudSrt)) return "sc";
        else if (search.match(/cdn.discordapp.com/) || message.attachments?.last()?.url) return "ds";
    }

    const SplitSearch = search.split(' ');
    const FindType = SplitSearch[0].toLowerCase() as "yt" | "sp" | "vk" | "sc";

    if (FindType.length > 2) return "yt";
    return FindType;
}