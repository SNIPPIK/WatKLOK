import {DiscordAPIError, VoiceChannel} from "discord.js";
import {FullTimeSongs} from "../Duration/FullTimeSongs";
import {ClientMessage} from "../../../Client";
import {EmbedConstructor, InputPlaylist} from "../../../Utils/TypeHelper";
import {Colors} from "../../../Utils/Colors";
import {NotImage} from "../../Structures/Message/Helper";

/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param playlist {InputPlaylist} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
 * @param VoiceChannel {VoiceChannel} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
 */
export function PlayList(message: ClientMessage, playlist: InputPlaylist, VoiceChannel: VoiceChannel): void {
    if (!playlist.items) return message.client.Send({
        text: `${message.author}, –Ø –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç, –û—à–∏–±–∫–∞: –ó–¥–µ—Å—å –±–æ–ª—å—à–µ 100 —Ç—Ä–µ–∫–æ–≤, youtube –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–¥–µ–ª–∞—Ç—å –º–Ω–µ —Å—Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤!`,
        message,
        color: "RED"
    });

    SendMessage(message, playlist).catch((err: DiscordAPIError) => console.log(`[Discord Error]: [Send message]: ${err}`));
    return void message.client.player.emit("play", message, VoiceChannel, playlist.items);
}
//====================== ====================== ====================== ======================
/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param playlist {object} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
 */
function SendMessage(message: ClientMessage, playlist: InputPlaylist): Promise<NodeJS.Timeout> {
    return message.channel.send({embeds: [PlaylistEmbed(message, playlist, Colors.BLUE)]}).then((msg: ClientMessage) => setTimeout(() => msg.delete().catch(() => null), 15e3));
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º Embed —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
 * @param client {WatKLOK} –ë–æ—Ç
 * @param DisAuthor {ClientMessage.author} –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param author {InputPlaylist.author} –ê–≤—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param image {InputPlaylist.image} –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param url {InputPlaylist.url} –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç
 * @param title {InputPlaylist.title} –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param items {InputPlaylist.items} –¢—Ä–µ–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param color {number} –¶–≤–µ—Ç –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ embed
 */
function PlaylistEmbed({client, author: DisAuthor}: ClientMessage, {author, image, url, title, items}: InputPlaylist, color: number): EmbedConstructor {
    return {
        color,
        author: {
            name: author?.title,
            iconURL: author?.image?.url ?? NotImage,
            url: author?.url,
        },
        thumbnail: {
            url: typeof image === "string" ? image : image.url ?? NotImage
        },
        description: `–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç [${title}](${url})`,
        timestamp: new Date(),
        footer: {
            text: `${DisAuthor.username} | ${FullTimeSongs(items)} | üé∂: ${items?.length}`,
            iconURL: DisAuthor.displayAvatarURL({}),
        }
    };
}