import {Queue} from "../Structures/Queue/Queue";
import {Song} from "../Structures/Queue/Song";
import {VoiceState} from "discord.js";
import {StatusPlayerHasSkipped} from "./AudioPlayer";
import {ClientMessage} from "../../Client";
import {DurationUtils} from "../Manager/DurationUtils";

const ParsingTimeToString = DurationUtils.ParsingTimeToString;

/**
 * –ó–¥–µ—Å—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–ª–µ–µ—Ä–æ–º
 */
export namespace PlayerController {
    /**
     * @description –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function PlayerResume (message: ClientMessage): void {
        const {client, guild, author} = message;
        const {player, songs}: Queue = client.queue.get(guild.id);
        const {title, color}: Song = songs[0];

        if (player.state.status === "paused") {
            player.resume();
            return client.Send({text: `‚ñ∂Ô∏è | Resume song | ${title}`, message, type: "css", color});
        }
        return client.Send({text: `${author}, –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞ [${player.state.status}]`, message, color: "RED"});
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function PlayerPause(message: ClientMessage): void {
        const {client, guild, author} = message;
        const {player, songs}: Queue = client.queue.get(guild.id);
        const {title, color}: Song = songs[0];

        if (player.state.status === "playing") {
            player.pause();
            return client.Send({text: `‚è∏ | Pause song | ${title}`, message, type: "css", color});
        }
        return client.Send({text: `${author}, –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞ [${player.state.status}]`, message, color: "RED"});
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –£–±–∏—Ä–∞–µ–º –º—É–∑—ã–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param args {string} –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ü—Ä–∏–º–µ—Ä: –∫–æ–º–∞–Ω–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç1 –∞—Ä–≥—É–º–µ–Ω—Ç2
     * @requires {PlayerEnd}
     */
    export function PlayerRemove(message: ClientMessage, args: number): void {
        const {client, guild, member, author} = message;
        const {player, songs}: Queue = client.queue.get(guild.id);
        const {title, color, requester, url}: Song = songs[args - 1];

        setImmediate(() => {
            const voiceConnection: VoiceState[] = client.connections(guild);
            const UserToVoice: boolean = !!voiceConnection.find((v: VoiceState) => v.id === songs[0].requester.id);

            //–ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç
            if (!StatusPlayerHasSkipped.has(player.state.status)) return client.Send({
                text: `${author}, ‚ö† –ú—É–∑—ã–∫–∞ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç!`,
                message,
                color: "RED"
            });

            //–ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ç—Ä–µ–∫
            if (songs.length <= 1) return PlayerEnd(message);

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∑–≤–æ–ª–µ–Ω–æ —É–±—Ä–∞—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫
            if (member.permissions.has("Administrator") || author.id === requester.id || !UserToVoice) {
                songs.splice(args - 1, 1);
                if (args === 1) PlayerEnd(message);
                return client.Send({text: `‚è≠Ô∏è | Remove song | ${title}`, message, type: "css", color});
            }

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
            return client.Send({text: `${author}, –¢—ã –Ω–µ –≤–∫–ª—é—á–∞–ª —ç—Ç—É –º—É–∑—ã–∫—É [${title}](${url})`, message, color: "RED"});
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param seek {number} –º—É–∑—ã–∫–∞ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Å –Ω—É–∂–Ω–æ–π —Å–µ–∫—É–Ω–¥—ã (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ ffmpeg)
     * @requires {ParsingTimeToString}
     */
    export function PlayerSeek(message: ClientMessage, seek: number): void {
        const {client, guild, author} = message;
        const {player, songs}: Queue = client.queue.get(guild.id);
        const {title, color}: Song = songs[0];

        try {
            client.Send({text: `‚è≠Ô∏è | Seeking to [${ParsingTimeToString(seek)}] song | ${title}`, message, type: "css", color});
            return player.seek(message, seek);
        } catch {
            return client.Send({text: `${author}, –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!`, message, color: "RED"});
        }
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param args {number} –°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
     * @requires {PlayerSkipTo, PlayerEnd}
     */
    export function PlayerSkip(message: ClientMessage, args: number): void {
        if (args) return PlayerSkipTo(message, args);

        const {client, guild, member, author} = message;
        const {songs, player}: Queue = client.queue.get(guild.id);
        const {title, color, requester, url}: Song = songs[0];

        setImmediate(() => {
            const voiceConnection: VoiceState[] = client.connections(guild);
            const UserToVoice: boolean = !!voiceConnection.find((v: VoiceState) => v.id === requester.id);

            //–ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç
            if (!StatusPlayerHasSkipped.has(player.state.status)) return client.Send({
                text: `${author}, ‚ö† –ú—É–∑—ã–∫–∞ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç!`,
                message,
                color: "RED"
            });

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∑–≤–æ–ª–µ–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É
            if (member.permissions.has("Administrator") || author.id === requester.id || !UserToVoice) {
                if (StatusPlayerHasSkipped.has(player.state.status)) {
                    client.Send({text: `‚è≠Ô∏è | Skip song | ${title}`, message, type: "css", color});
                    return PlayerEnd(message);
                }
            }

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
            return client.Send({text: `${author}, –¢—ã –Ω–µ –≤–∫–ª—é—á–∞–ª —ç—Ç—É –º—É–∑—ã–∫—É [${title}](${url})`, message, color: "RED"});
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function PlayerReplay(message: ClientMessage): void {
        const {client, guild, author} = message;
        const {player, songs}: Queue = client.queue.get(guild.id);
        const {title, color}: Song = songs[0];

        try {
            client.Send({text: `üîÇ | Replay | ${title}`, message, color, type: "css"});
            return player.seek(message);
        } catch {
            return client.Send({text: `${author}, –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!`, message, color: "RED"});
        }
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–ª–µ–µ—Ä–∞
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function PlayerFilter(message: ClientMessage): void {
        const {client, guild, author} = message;
        const {player}: Queue = client.queue.get(guild.id);
        const seek: number = player.playbackDuration;

        try {
            return player.seek(message, seek);
        } catch {
            return client.Send({text: `${author}, –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!`, message, color: "RED"});
        }
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –º—É–∑—ã–∫—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param args {string} –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ü—Ä–∏–º–µ—Ä: –∫–æ–º–∞–Ω–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç1 –∞—Ä–≥—É–º–µ–Ω—Ç2
 * @requires {PlayerEnd}
 */
function PlayerSkipTo(message: ClientMessage, args: number): void {
    const {client, guild, member, author} = message;
    const queue: Queue = client.queue.get(guild.id);
    const {title, color, requester, url}: Song = queue.songs[args - 1];

    setImmediate(() => {
        const voiceConnection: VoiceState[] = client.connections(guild);
        const UserToVoice: boolean = !!voiceConnection.find((v: VoiceState) => v.id === queue.songs[0].requester.id);

        //–ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç
        if (!StatusPlayerHasSkipped.has(queue.player.state.status)) return client.Send({
            text: `${author}, ‚ö† –ú—É–∑—ã–∫–∞ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç!`,
            message,
            color: "RED"
        });

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∂–µ—Ç –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏
        if (args > queue.songs.length) return client.Send({
            text: `${author}, –í –æ—á–µ—Ä–µ–¥–∏ ${queue.songs.length}!`,
            message,
            color: "RED"
        });

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∑–≤–æ–ª–µ–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É
        if (member.permissions.has("Administrator") || author.id === requester.id || !UserToVoice) {
            if (queue.options.loop === "songs") for (let i = 0; i < args - 2; i++) queue.songs.push(queue.songs.shift());
            else queue.songs = queue.songs.slice(args - 2);

            client.Send({text: `‚è≠Ô∏è | Skip to song [${args}] | ${title}`, message, type: "css", color});
            return PlayerEnd(message);
        }

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
        return client.Send({text: `${author}, –¢—ã –Ω–µ –≤–∫–ª—é—á–∞–ª —ç—Ç—É –º—É–∑—ã–∫—É [${title}](${url})`, message, color: "RED"});
    });
}
//====================== ====================== ====================== ======================
/**
 * @description –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 */
function PlayerEnd(message: ClientMessage): void {
    const {client, guild} = message;
    const {player}: Queue = client.queue.get(guild.id);

    if (StatusPlayerHasSkipped.has(player.state.status)) setTimeout(player.stop, 300);
}