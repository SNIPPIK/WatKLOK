import {Command} from "../Structures/Command";
import {readdirSync} from "node:fs";
import {WatKLOK} from "./Client/Client";
import {Module} from "../Structures/Module";
import {Event} from "../Structures/Event";

type FileSystemSupport = Command | Event<any, any> | Module;
type FileSystemCallback = { dir: string, file: string, reason: string };

let FileBase = {
    commands: [] as string[],
    events: [] as string[],
    modules: [] as string[],
};

//–î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ Array –±–∞–∑—É
function SendLog(type: "commands" | "events" | "modules", file: string, reason?: string) {
    const Status = `Status: [${reason ? "üü•" : "üü©"}]`;
    const File = `File: [${file}]`;
    let EndStr = `${Status} | ${File}`;

    if (reason) EndStr += ` | Reason: [${reason}]`; //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ

    return FileBase[type].push(EndStr);
}

export function FileSystemLoad(client: WatKLOK): void {
    if (!client.ShardID) {
        console.clear(); //–ß–∏—Å—Ç–∏–º –∫–æ–Ω—Å–æ–ª—å

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º—ã
        setImmediate(() => {
            Object.entries(FileBase).forEach(([key, value]) => {
                const AllLogs = value.join("\n");
                console.log(`| FileSystem... Loaded [dir: ${key}, total: ${value.length}]\n${AllLogs}\n`);
            });

            //–ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —É–¥–∞–ª—è–µ–º
            delete FileBase.commands;
            delete FileBase.events;
            delete FileBase.modules;
            //

            console.log("\nProcess logs:");
        });
    }

    //–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    new MultiFileSystem({
        path: "Handler/Commands",
        callback: (pull: Command, {file, reason, dir}) => {
            if (reason) return SendLog("commands", `./Handler/Commands/${dir}/${file}`, reason);
            else if (!pull.name) return SendLog("commands", `./Handler/Commands/${dir}/${file}`, "Parameter name has undefined");

            client.commands.set(pull.name, pull);
            SendLog("commands", `./Handler/Commands/${dir}/${file}`);
        }
    });
    //–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≤–µ–Ω—Ç—ã
    new MultiFileSystem({
        path: "Handler/Events",
        callback: (pull: Event<any, any>, {file, reason, dir}) => {
            if (reason) return SendLog("events", `./Handler/Events/${dir}/${file}`, reason);
            else if (!pull.name) return SendLog("events", `./Handler/Events/${dir}/${file}`, "Parameter name has undefined");

            client.on(pull.name, (ev: any, ev2: any) => pull.run(ev, ev2, client));
            SendLog("events", `./Handler/Events/${dir}/${file}`);
        }
    });
    //–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
    new MultiFileSystem({
        path: "Handler/Modules",
        callback: (pull: Module, {file, reason, dir}) => {
            if (reason) return SendLog("modules", `./Handler/Modules/${dir}/${file}`, reason);

            pull.run(client);
            SendLog("modules", `./Handler/Modules/${dir}/${file}`);
        }
    });
}

class MultiFileSystem {
    private readonly path: string;
    private readonly callback: (pull: FileSystemSupport, option: FileSystemCallback) => void;

    public constructor(options: {path: string, callback: (pull: FileSystemSupport, option: FileSystemCallback) => void}) {
        this.path = options.path;
        this.callback = options.callback;

        this.readDir();
    };

    private readonly readDir = () => {
        //–°–º–æ—Ç—Ä–∏–º —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ
        readdirSync(`./src/${this.path}`).forEach(async (dir: string) => {
            if (dir.endsWith(".js") || dir.endsWith(".ts")) return;

            //–ë–µ—Ä–µ–º —Ñ–∞–π–ª—ã –º–∑ –ø–∞–ø–∫–∏
            const files = readdirSync(`./src/${this.path}/${dir}/`).filter((file: string) => (file.endsWith(".js") || file.endsWith(".ts")));

            for (let file of files) {
                let reason: string = null;
                const pull = await this.findExport(`../${this.path}/${dir}/${file}`);

                //–î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∫–∞–∫ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å
                if (!pull) reason = "Exports length has 0";
                else if (!pull.enable) reason = "Parameter enable has false";
                else if (!pull.run) reason = "Function run has not found";

                //–ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                if (pull instanceof Error) {
                    reason = pull.message;
                }

                if ("type" in pull) pull.type = dir; //–ï—Å–ª–∏ –µ—Å—Ç—å type –≤ pull

                this.callback(pull, {dir, file, reason}); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ callback
            }
        });
    };

    //–ó–∞–≥—Ä—É–∂–∞–µ–º export
    private readonly findExport = async (path: string): Promise<null | FileSystemSupport> => {
        const importFile = (await import(path));
        const keysFile = Object.keys(importFile);

        if (keysFile.length <= 0) return null;

        return new importFile[keysFile[0]];
    };
}