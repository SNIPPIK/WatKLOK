import {ClientInteraction, ClientMessage} from "@handler/Events/Atlas/interactionCreate";
import {ActionRowBuilder, Colors, CommandInteraction, EmbedData} from "discord.js";
import {Logger} from "@Client";

/**
 * @author SNIPPIK
 * @description –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
 */
namespace Constructors {
    /**
     * @description –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–µ–Ω—é
     */
    export interface menu {
        content?:       string;
        embeds?:        EmbedData[];
        pages:          string[];
        page:           number;
        callback:       (message: ClientMessage, pages: string[], page: number) => void;
    }

    /**
     * @description –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ embed
     */
    export interface simple {
        color?: "DarkRed" | "Blue" | "Green" | "Default" | "Yellow" | "Grey" | "Navy" | "Gold" | "Orange" | "Purple" | number;
        codeBlock?:     string;
        content:        string;
    }

    /**
     * @description –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä embeds, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–∏—Ö embeds
     */
    export interface embeds {
        embeds:         EmbedData[];
    }

    /**
     * @description –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    export interface main {
        promise?:       (msg: ClientMessage) => void;
        components?:    ActionRowBuilder[];
        replied?:       boolean;
        time?:          number;
    }
}

/**
 * @description –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö
 * @class MessageConstructor
 */
export type MessageConstructorType = (Constructors.menu | Constructors.embeds | Constructors.simple) & Constructors.main;

/**
 * @author SNIPPIK
 * @description –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Discord
 * @class MessageConstructor
 */
export class MessageConstructor {
    private readonly _options: MessageConstructorType & { message?: ClientMessage | ClientInteraction; fetchReply?: boolean } = {time: 15e3, embeds: null, fetchReply: true };
    public constructor(options: MessageConstructor["_options"]) {
        Object.assign(this._options, options);
        const {time, promise} = options;

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.channel.then((message) => {
            //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            if (time !== 0) MessageConstructor.delete = {message, time};

            //–ï—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (!message) return;

            //–ï—Å–ª–∏ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ
            if (promise) promise(message);

            //–ï—Å–ª–∏ –º–µ–Ω—é, —Ç–æ –Ω–µ –Ω–∞–¥–æ —É–¥–∞–ª—è—Ç—å
            if ("page" in options) this._createMenu(message);
        }).catch((err) => Logger.log("ERROR", err));
    };
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
     * @private
     */
    private get color() {
        const options = this._options;

        if ("color" in options) return typeof options.color === "number" ? options.color : Colors[options.color] ?? 258044;
        return 258044;
    };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return object
     */
    protected get messageOptions() {
        let options = this._options;

        //–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if ("content" in options && !("page" in options)) {
            options = {
                ...options, embeds: [{
                    color: this.color,
                    description: options.codeBlock ? `\`\`\`${options.codeBlock}\n${options.content}\n\`\`\`` : options.content
                }]
            }
            delete options["content"];
        }

        return options as any;
    };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return Promise<ClientMessage>
     */
    protected get channel(): Promise<ClientMessage> {
        const {message, replied} = this._options;

        if ("replied" in message && !(message as any).replied && !replied) {
            if (message.isRepliable()) return message.reply(this.messageOptions);
            return message.followUp(this.messageOptions);
        }

        return message.channel.send(this.messageOptions) as Promise<ClientMessage>;
    };

    /**
     * @description –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
     * @param options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public static set delete(options: { message: CommandInteraction | ClientMessage, time?: number }) {
        const {message, time} = options;

        //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            if ("deletable" in message && message.deletable) {
                message.delete().catch((err) => Logger.log("WARN", err));
            } else if ("replied" in message && !(message as any).replied) {
                (message as CommandInteraction)?.deleteReply().catch((err) => Logger.log("WARN", err))
            }
        }, time ?? 15e3);
    };

    /**
     * @description –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
     * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return void
     */
    private _createMenu = (message: ClientMessage) => {
        let {page, pages, callback} = this._options as Constructors.menu;

        for (const [key, emoji] of Object.entries({back: "‚¨ÖÔ∏è", cancel: "üóë", next: "‚û°Ô∏è"})) {
            message.react(emoji).then(() => message.createReactionCollector({time: 60e3,
                filter: (reaction, user) => reaction.emoji.name === emoji && user.id !== message.client.user.id
            }).on("collect", ({users}): void => {
                users.remove(this._options.message.author).catch(() => null);

                //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (key === "cancel") MessageConstructor.delete = {message, time: 2e3};

                //–ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                else if (page === pages.length || page < 1) return;

                //–í—ã–±–∏—Ä–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å—Ç—Ä–∞–Ω–∏—á–∫–æ–π, –ø—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥
                else if (key === "next") page++;
                else page--;

                //–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                return callback(message, pages, page);
            }));
        }
    };
}