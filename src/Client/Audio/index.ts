import {ClientMessage} from "@handler/Events/Atlas/interactionCreate";
import {Collection} from "@Client/Audio/Queue/Collection";
import {Filter} from "@Client/Audio/Player/AudioResource";
import {ArrayQueue} from "@Client/Audio/Queue/Queue";
import {Song} from "@Client/Audio/Queue/Song";
import {httpsClient} from "@Client/Request";
import {ActionMessage} from "@Client";
import {API} from "@handler/APIs";
import {env} from "@env";
import {db} from "@src";
import {ActionRowBuilder, Colors, StringSelectMenuBuilder} from "discord.js";
/**
 * @author SNIPPIK
 * @description –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –º—É–∑—ã–∫–µ
 * @class db_Music
 * @private
 */
export class db_Music {
    private readonly _queue = new Collection();
    private readonly _filters: Filter[] = [];
    private readonly _platform = {
        supported: [] as API.load[],
        authorization: [] as API.platform[],
        audio: [] as API.platform[],
        block: [] as API.platform[]
    };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     * @return object
     * @public
     */
    public get platforms() { return this._platform; };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º CollectionQueue
     * @return CollectionQueue
     * @public
     */
    public get queue() { return this._queue; };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö github
     * @return Filter[]
     * @public
     */
    public get filters() { return this._filters; };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö WatKLOK
     * @return Promise<Error | true>
     * @public
     */
    public get gettingFilters(): Promise<Error | true> {
        return new Promise<Error | true>(async (resolve, reject) => {
            const raw = await new httpsClient(env.get("filters.url"), {useragent: true}).toJson;

            if (raw instanceof Error) return reject(raw);
            this._filters.push(...raw);

            return resolve(true);
        });
    };
}


/**
 * @author SNIPPIK
 * @class Duration
 */
export const Duration = new class {
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
     * @param min {number} –ú–∏–Ω —á–∏—Å–ª–æ
     * @param max {number} –ú–∞–∫—Å —á–∏—Å–ª–æ
     */
    public randomNumber = (min: number = 0, max: number) => parseInt((Math.random() * (max - min) + min).toFixed(0));


    /**
     * @description –°–æ–≤–º–µ—â–∞–µ–º –≤—Ä–µ–º—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param songs {Song[] | Song.track[]} –û—á–µ—Ä–µ–¥—å
     */
    public getTimeArray = (songs: Song[]): string => {
        //–ï—Å–ª–∏ —Ç—Ä–µ–∫ —Ç—Ä–µ–∫–æ–≤
        if (songs.length === 0) return "00:00";

        let time = 0;
        for (let i = 0; i < songs.length; i++) time += songs[i].duration.seconds;

        return this.parseDuration(time);
    };


    /**
     * @description –î–æ–±–∞–≤–ª—è–µ–º 0 –∫ —á–∏—Å–ª—É. –ü—Ä–∏–º–µ—Ä: 01:10
     * @param duration {string | number} –ß–∏—Å–ª–æ
     * @return string | number
     */
    public toSplit = (duration: string | number): string | number => {
        const fixed = parseInt(duration as string);

        return (fixed < 10) ? ("0" + fixed) : fixed;
    };


    /**
     * @description –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –≤ 00:00
     * @param duration {number} –í—Ä–µ–º—è –≤ int
     * @return string
     */
    public parseDuration = (duration: number): string => {
        const days = this.toSplit(duration / ((60 * 60) * 24) % 24) as number;
        const hours = this.toSplit(duration / (60 * 60) % 24) as number;
        const minutes = this.toSplit((duration / 60) % 60) as number;
        const seconds = this.toSplit(duration % 60) as number;

        return (days > 0 ? `${days}:` : "") + (hours > 0 || days > 0 ? `${hours}:` : "") + (minutes > 0 ? `${minutes}:` : "00:") + (seconds > 0 ? `${seconds}` : "00");
    };


    /**
     * @description –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º 00:00 –≤ —á–∏—Å–ª–æ
     * @param duration {string} –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00
     * @return number
     */
    public parseDurationString = (duration: string): number => {
        const time = duration?.split(":").map((value) => parseInt(value)) ?? [parseInt(duration)];

        switch (time.length) {
            case 4: return (time[0] * ((60 * 60) * 24)) + (time[1] * ((60 * 60) * 24)) + (time[2] * 60) + time[3];
            case 3: return (time[0] * ((60 * 60) * 24)) + (time[1] * 60) + time[2];
            case 2: return (time[0] * 60) + time[1];
            default: return time[0];
        }
    };
}






/**
 * @author SNIPPIK
 * @description –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞
 */
const local_db = {
    ne_center: env.get("progress.not_empty.center"),
    ne_left: env.get("progress.not_empty.left"),
    ne_right: env.get("progress.not_empty.right"),
    bottom: env.get("progress.bottom"),
    e_center: env.get("progress.empty.center"),
    e_left: env.get("progress.empty.left"),
    e_right: env.get("progress.empty.right"),

    not_image: env.get("image.not"),
    image_disk: env.get("image.currentPlay")
};

/**
 * @author SNIPPIK
 * @description –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ —Ç—Ä–µ–∫–∞
 * @class ProgressBar
 */
class ProgressBar {
    private readonly _current: number;
    private readonly _max: number;
    private readonly _size: number = 12;
    /**
     * @description –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
     */
    public get bar(): string {
        const size = this._size, current = this._current, max = this._max;
        const progressZ = Math.round(size * (isNaN(current) ? 0 : current / max));
        let progress: string = "";

        //–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ –¥–æ—Ä–æ–∂–∫–∏
        if (current > 0) progress += `${local_db.ne_left}`;
        else progress += `${local_db.e_left}`;

        //–°–µ—Ä–µ–¥–∏–Ω–∞ –¥–æ—Ä–æ–∂–∫–∏ + —Ç–æ—á–∫–∞
        if (current === 0) progress += `${local_db.ne_center.repeat(progressZ)}${local_db.e_center.repeat((size + 1) - progressZ)}`;
        else if (current >= max) progress += `${local_db.ne_center.repeat(size)}`;
        else progress += `${local_db.ne_center.repeat(progressZ)}${local_db.bottom}${local_db.e_center.repeat(size - progressZ)}`;

        //–ö–æ–Ω–µ—Ü –¥–æ—Ä–æ–∂–∫–∏
        if (current >= max) progress += `${local_db.ne_right}`;
        else progress += `${local_db.e_right}`

        return progress;
    };

    public constructor(currentDur: number, max: number) {
        if (currentDur > max) this._current = max;
        else this._current = currentDur;

        this._max = max;
    };
}


/**
 * @description –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º Array –≤ Array<Array>
 * @param number {number} –°–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –±—É–¥–µ—Ç –≤ Array
 * @param array {Array} –°–∞–º Array
 * @param callback {Function} –ö–∞–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
 * @param joined {string} –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ
 */
export function ArraySort<V>(number: number = 5, array: V[], callback: (value: V, index?: number) => string, joined: string = "\n\n"): string[] {
    const pages: string[] = [];
    const lists = Array(Math.ceil(array.length / number)).fill(array[0]).map((_, i) => array.slice(i * number, i * number + number));

    for (const list of lists) {
        const text = list.map((value, index) => callback(value, index)).join(joined);

        if (text !== undefined) pages.push(text);
    }

    return pages;
}


export function toPlay(queue: ArrayQueue, isVoid = true) {
    const {color, author, image, requester, title, url, duration} = queue.songs.song;

    //–î–µ–ª–∞–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –¥–ª—è progress bar'–∞
    const currentTime = queue.player?.stream?.duration ?? 0;
    const progress = `\`\`${Duration.parseDuration(currentTime)}\`\` ${new ProgressBar(currentTime, duration.seconds).bar} \`\`${duration.full}\`\``;
    const fields = [
        {
            name: `**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç**`,
            value: `**‚ùØ** **[${title}](${url})**\n${progress}`
        }
    ];

    //–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    if (queue.songs.size > 1) {
        const song = queue.songs[1];
        fields.push({name: `**–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫**`, value: `**‚ùØ** **[${song.title}](${song.url})**`});
    }
    const embed = {
        color, thumbnail: image.track, fields,
        author: {name: author.title, url: author.url, iconURL: local_db.image_disk},
        footer: {
            text: `${requester.username} | ${queue.songs.time} | üé∂: ${queue.songs.size}`,
            iconURL: requester.avatarURL()
        }
    }

    //–µ—Å–ª–∏ –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
    if (!isVoid) return embed;

    new ActionMessage({
        message: queue.message, embeds: [embed], time: 0, replied: true,
        components: [queue.components as any],
        promise: (msg: ClientMessage) => {
            db.music.queue.cycles.messages.push(msg);
        }
    });
}

export function toPush (queue: ArrayQueue) {
    const {color, author, image, title, url, duration, requester} = queue.songs.last;

    new ActionMessage({
        message: queue.message, replied: true, time: 12e3,
        embeds: [
            {
                color, thumbnail: image.track,
                author: {name: author.title, iconURL: local_db.image_disk, url: author.url},
                footer: {
                    text: `${requester.username} | ${queue.songs.time} | üé∂: ${queue.songs.size}`,
                    iconURL: requester.avatarURL()
                },


                fields: [
                    {
                        name: "**–ù–æ–≤—ã–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏**",
                        value: `**‚ùØ** **[${title}](${url}})\n**‚ùØ** \`\`${duration.full}\`\`**`
                    }
                ]
            }
        ]
    });
}

export function toError (queue: ArrayQueue, error: string | Error) {
    const {color, author, image, title, url, requester} = queue.songs.song;

    new ActionMessage({
        message: queue.message, replied: true, time: 10e3,
        embeds: [
            {
                color, thumbnail: image.track, timestamp: new Date(),
                description: `\n[${title}](${url})\n\`\`\`js\n${error}...\`\`\``,
                author: {name: author.title, url: author.url, iconURL: local_db.image_disk},
                footer: {
                    text: `${requester.username} | ${queue.songs.time} | üé∂: ${queue.songs.size}`,
                    iconURL: requester?.avatarURL()
                }
            }
        ]
    });
}

export function toPushPlaylist (message: ClientMessage, playlist: Song.playlist) {
    const {author, image, url, title, items} = playlist;

    new ActionMessage({
        message, replied: true, time: 12e3,
        embeds: [
            {
                color: Colors.Blue, timestamp: new Date(),
                author: {name: author?.title, url: author?.url, iconURL: local_db.image_disk},
                thumbnail: typeof image === "string" ? {url: image} : image ?? {url: local_db.not_image},

                footer: {
                    text: `${message.author.username} | ${Duration.getTimeArray(items)} | üé∂: ${items?.length}`,
                    iconURL: message.author.displayAvatarURL({})
                },
                fields: [
                    {
                        name: `**–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç**`,
                        value: `**‚ùØ** **[${title}](${url})**\n**‚ùØ** **–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${items.length}**`
                    }
                ]
            }
        ]
    });
}

export function toSearch (tracks: Song[], platform: string, message: ClientMessage) {
    if (tracks?.length < 1 || !tracks) return void (new ActionMessage({
        content: `${message.author} | –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!`,
        color: "DarkRed", message, replied: true
    }));

    new ActionMessage({
        replied: true, time: 30e3, message,
        //–°–æ–æ–±—â–µ–Ω–∏–µ
        embeds: [{
            color: Colors.White, timestamp: new Date(),
            author: {name: message.guild.name, iconURL: local_db.image_disk},
            title: "–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏!"
        }],

        //–¢—Ä–µ–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        components: [new ActionRowBuilder().addComponents(new StringSelectMenuBuilder().setCustomId("menu-builder").setPlaceholder("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏")
            .setOptions(...tracks.map((track) => {
                    return {
                        label: `${track.title}`,
                        description: `${track.author.title} | ${track.duration.full}`,
                        value: track.url
                    }
                }), {label: "–û—Ç–º–µ–Ω–∞", value: "stop"}
            )
        )],

        //–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        promise: (msg) => {
            //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
            const collector = msg.createMessageComponentCollector({
                filter: (interaction) => !interaction.user.bot,
                time: 30e3,
                max: 1
            });

            //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞
            collector.once("collect", (interaction: any) => {
                const id = interaction.values[0];

                if (id && id !== "stop") {
                    //–ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–µ
                    const command = db.commands.get("play").execute(message, [platform, id]);
                    if (command) {
                        if ((command instanceof Promise)) command.then((d) => new ActionMessage({...d, message}));
                        else new ActionMessage({...command, message});
                    }
                }

                interaction?.deferReply();
                interaction?.deleteReply();

                //–£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                ActionMessage.delete = {message: msg};
                collector.stop();
            });
        }
    });
}