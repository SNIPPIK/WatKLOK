import {ActivityType, Client, IntentsBitField, Options, Collection} from "discord.js";
import {DurationUtils} from "@Managers/DurationUtils";
import {ClientMessage} from "@Client/interactionCreate";
import {Bot, Channels, APIs} from "@db/Config.json";
import {Command} from "@Structures/Handle/Command";
import {Player} from "@AudioPlayer/index";
import {FileSystem} from "@FileSystem";
import {Queue} from "@Queue/Queue";
import {env} from "@env";

export function consoleTime(data: string) {
    const date = new Date();
    const reformatDate = [date.getHours(), date.getMinutes(), date.getSeconds()].map(DurationUtils.toFixed0);

    if (client.ShardID) return console.log(`[ShardID: ${client.ShardID}]: [${reformatDate.join(":")}.${date.getMilliseconds()}] ${data}`);
    return console.log(`[${reformatDate.join(":")}.${date.getMilliseconds()}] ${data}`);
}

const queue = new Collection<string, Queue>();
const commands = new Collection<string, Command>(); //–ë–∞–∑–∞, —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏

export class WatKLOK extends Client {
    /**
     * @description –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
     */
    public get commands() { return commands; };
    //====================== ====================== ====================== ======================
    /**
     * @description –í—Å–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –±–æ—Ç–∞
     */
    public get queue() { return queue; };
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–ª–µ–µ—Ä
     */
    public get player() { return Player; };
    //====================== ====================== ====================== ======================
    /**
     * @description –¢–µ–∫—É—â–∏–π ID –æ—Å–∫–æ–ª–∫–∞
     */
    public get ShardID() { return this.shard?.ids[0] ?? undefined; };
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –±–æ—Ç–∞ –∏ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
     */
    public constructor() {
        super({
            sweepers: { ...Options.DefaultSweeperSettings,
                messages: {
                    interval: 1800, // Every 30 min...
                    lifetime: 900	// 15 minutes.
                }
            },
            //–ó–∞–ø—Ä–µ—â–∞–µ–º Discord.js<Client> –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            makeCache: Options.cacheWithLimits({
                ...Options.DefaultMakeCacheSettings,
                AutoModerationRuleManager: 0,

                //–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å
                PresenceManager: 0,

                //–ë–æ—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ç–∏–∫–µ—Ä—ã
                GuildStickerManager: 0,

                //–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–Ω
                GuildBanManager: 0,

                //–ë–æ—Ç—É –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ–æ—Ä—É–º—ã
                GuildForumThreadManager: 0,

                //–ë–æ—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Ä–æ–ª–∏
                StageInstanceManager: 0,

                //–ë–æ—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                GuildInviteManager: 0,

                //–ë–æ—Ç—É –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–≤–µ–Ω—Ç guildScheduledEventCreate
                GuildScheduledEventManager: 0
            }),
            intents: [
                //Message (–ë–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã)
                IntentsBitField.Flags.GuildMessages,
                IntentsBitField.Flags.DirectMessages,

                //Reaction (–ë–æ—Ç –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å emoji)
                IntentsBitField.Flags.GuildMessageReactions,
                IntentsBitField.Flags.DirectMessageReactions,

                //Emoji and stickers (–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ emoji –∏–ª–∏ —Å—Ç–∞–∫–µ—Ä–∞—Ö)
                IntentsBitField.Flags.GuildEmojisAndStickers,

                //Slash Commands (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø–Ω—ã slash –∫–æ–º–∞–Ω–¥—ã)
                IntentsBitField.Flags.GuildIntegrations,

                //Default Commands (–ë–æ—Ç –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                IntentsBitField.Flags.MessageContent,

                //Voice (–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ)
                IntentsBitField.Flags.GuildVoiceStates,

                //Guild (–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö)
                IntentsBitField.Flags.Guilds,
                //IntentsBitField.Flags.GuildMembers,

            ],
            ws: { properties: { browser: "Web" as "Discord iOS" | "Web" } },
            presence: {
                activities: [{
                    name: "Music üé∂",
                    type: ActivityType.Listening
                }]
            }
        });
    };
    //====================== ====================== ====================== ======================
    /**
     * @description –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—è–µ–º djs<Client.login>
     * @param token {string} –¢–æ–∫–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ env.TOKEN
     */
    public login(token: string = env.get("TOKEN")): Promise<string> {
        FileSystem.initFileSystem(this);

        return super.login(token);
    };
}
const client = new WatKLOK();

client.login().then(() => {
    if (Bot.ignoreErrors) process.on("uncaughtException", (err) => {
        //–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ APIs.showErrors, —Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
        if (!APIs.showErrors && err?.message?.match(/APIs/)) return;

        consoleTime(`[IgnoreError]: ${err.name} | ${err.message}\n${err.stack}`);

        //–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ APIs.sendErrors, —Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        if (!APIs.sendErrors && err?.message?.match(/APIs/)) return;

        try {
            const channel = client.channels.cache.get(Channels.sendErrors) as ClientMessage["channel"];

            if (channel) channel.send({content: `\`\`\`ts\nError: ${err.message}\nType: ${err.name}\n\nFull Error: ${err.stack}\n\`\`\``}).catch(() => null);
        } catch {/* Continue */}
    });
});