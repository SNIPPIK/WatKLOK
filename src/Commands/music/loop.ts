import {Command} from "../../Structures/Command";
import {Queue} from "../../Core/AudioPlayer/Structures/Queue/Queue";
import {ApplicationCommandOptionType} from "discord.js";
import {ClientMessage} from "../../Events/Activity/Message";

export default class Loop extends Command {
    public constructor() {
        super({
            name: "loop",
            aliases: ["repeat", "rept"],
            description: "–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –º—É–∑—ã–∫–∏!",

            options: [
                {
                    name: "type",
                    description: "Type - (song, on, off)",
                    type: ApplicationCommandOptionType.String
                }
            ],
            slash: true,
            enable: true,
        })
    };

    public readonly run = (message: ClientMessage, args: string[]): void => {
        const queue: Queue = message.client.queue.get(message.guild.id);

        //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if (queue && queue.channels.voice && message.member.voice.channel.id !== queue.channels.voice.id) return message.client.sendMessage({
            text: `${message.author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.channels.voice.id}>`,
            message,
            color: "RED"
        });

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
        if (!message.member.voice.channel || !message.member.voice) return message.client.sendMessage({
            text: `${message.author}, –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`,
            message,
            color: "RED"
        });

        //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
        if (!queue) return message.client.sendMessage({
            text: `${message.author}, ‚ö† | –ú—É–∑—ã–∫–∞ —â–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`,
            message,
            color: "RED"
        });

        switch (args[0]) {
            case "–≤—ã–∫–ª":
            case "off":
                queue.options.loop = "off";
                return message.client.sendMessage({text: `‚ùå | –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω`, message, type: "css"});

            case "–≤–∫–ª":
            case "on":
                queue.options.loop = "songs";
                return message.client.sendMessage({text: `üîÅ | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –º—É–∑—ã–∫–∏`, message, type: "css"});

            case "one":
            case "1":
            case "song":
                queue.options.loop = "song";
                return message.client.sendMessage({ text: `üîÇ | –ü–æ–≤—Ç–æ—Ä  | ${queue.songs[0].title}`, message, type: "css", color: queue.songs[0].color });
            default:
                queue.options.loop = queue.options.loop !== "songs" ? "songs" : "off";

                let loop = null;
                if (queue.options.loop === "songs") loop = '–≤—Å–µ–π –º—É–∑—ã–∫–∏';
                else if (queue.options.loop === "off") loop = '–≤—ã–∫–ª';
                else if (queue.options.loop === "song") loop = '–æ–¥–Ω–æ–π –º—É–∑—ã–∫–∏';
                return message.client.sendMessage({text: `üé∂ | –ü–æ–≤—Ç–æ—Ä ${loop}`, message, type: "css"});
        }
    };
}