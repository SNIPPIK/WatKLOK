import {Command} from "../Constructor";
import {Queue} from "../../Core/Player/Structures/Queue/Queue";
import {ClientMessage} from "../../Core/Client";
import {Song} from "../../Core/Player/Structures/Queue/Song";
import {ApplicationCommandOptionType} from "discord.js";

export class CommandShuffle extends Command {
    public constructor() {
        super({
            name: "shuffle",
            aliases: [],
            description: "–ü–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ –º—É–∑—ã–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!",

            options: [{
                name: "value",
                description: "Shuffle queue songs",
                required: true,
                type: ApplicationCommandOptionType.String
            }],
            enable: true,
            slash: true
        });
    };

    public run = (message: ClientMessage): void => {
        const queue: Queue = message.client.queue.get(message.guild.id);

        if (!queue) return message.client.Send({
            text: `${message.author}, ‚ö† | –ú—É–∑—ã–∫–∞ —â–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`,
            message,
            color: 'RED'
        });

        if (queue && queue.channels.voice && message.member.voice.channel.id !== queue.channels.voice.id) return message.client.Send({
            text: `${message.author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.channels.voice.id}>`,
            message,
            color: 'RED'
        });

        if (!message.member.voice.channel || !message.member.voice) return message.client.Send({
            text: `${message.author}, –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`,
            message,
            color: 'RED'
        });

        if (!queue.songs) return message.client.Send({
            text: `${message.author}, –ù–µ—Ç –º—É–∑—ã–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!`,
            message,
            color: 'RED'
        });

        if (queue.songs.length < 3) return message.client.Send({
            text: `${message.author}, –û—á–µ–Ω—å –º–∞–ª–æ –º—É–∑—ã–∫–∏, –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ 3`,
            message,
            color: 'RED'
        });

        this.#shuffleSongs(queue.songs);
        return message.client.Send({text: `üîÄ | Shuffle total [${queue.songs.length}]`, message, type: 'css'});
    };

    #shuffleSongs = (songs: Song[]): void => {
        for (let i = songs.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [songs[i], songs[j]] = [songs[j], songs[i]];
        }
    };
}