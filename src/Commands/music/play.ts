import {Command} from "../Constructor";
import {
    ApplicationCommandOptionType,
    StageChannel,
    VoiceChannel
} from "discord.js";
import {ClientMessage} from "../../Core/Client";
import {Queue} from "../../Core/Player/Structures/Queue/Queue";
import {FindTrackInfo} from "../../Core/Player/Audio/FindResource";

const youtubeStr = /^(https?:\/\/)?(www\.)?(m\.)?(music\.)?( )?(youtube\.com|youtu\.?be)\/.+$/gi;
const spotifySrt = /^(https?:\/\/)?(open\.)?(m\.)?(spotify\.com|spotify\.?ru)\/.+$/gi;
const SoundCloudSrt = /^(?:(https?):\/\/)?(?:(?:www|m)\.)?(api\.soundcloud\.com|soundcloud\.com|snd\.sc)\/(.*)$/;
const UrlSrt = /^(https?:\/\/)/gi;
const {getSoundCloud, getVk, getSpotify, getYouTube, getDiscord} = FindTrackInfo;

export class CommandPlay extends Command {
    public constructor() {
        super({
            name: "play",
            aliases: ["p", "playing", "–∑"],
            description: "–í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–π —Ñ–∞–π–ª!",

            permissions: {client: ["Speak", "Connect"], user: []},
            options: [
                {
                    name: "url-name-type",
                    description: "–£–∫–∞–∂–∏ —á—Ç–æ –Ω—É–∂–Ω–æ, —Å—Å—ã–ª–∫—É, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                    required: true,
                    type: ApplicationCommandOptionType.String
                },
                {
                    name: "search",
                    description: "–ü—Ä–æ—à–ª—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–∏–ø? –ï—Å–ª–∏ –¥–∞, —Ç—É—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!",
                    required: false,
                    type: ApplicationCommandOptionType.String
                }
            ],
            enable: true,
            slash: true,
            CoolDown: 8
        })
    };

    public readonly run = (message: ClientMessage, args: string[]): void => {
        const voiceChannel: VoiceChannel | StageChannel = message.member.voice.channel;
        const queue: Queue = message.client.queue.get(message.guild.id);
        const search: string = args.join(" ");

        //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if (queue && queue.channels.voice && message.member.voice.channel.id !== queue.channels.voice.id) return message.client.Send({
            text: `${message.author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.channels.voice.id}>`,
            message,
            color: "RED"
        });

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
        if (!voiceChannel || !message.member.voice) return message.client.Send({
            text: `${message.author}, –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`,
            message,
            color: "RED"
        });

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç
        if (!search && !message.attachments) return message.client.Send({
            text: `${message.author}, –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª!`,
            message,
            color: "RED"
        });

        try {
            //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞
            message.client.Send({
                text: `üîç | –ü–æ–∏—Å–∫ -> ${search}`,
                message,
                color: "RED",
                type: "css"
            });

            return this.#getInfoPlatform(search, message, voiceChannel);
        } catch (e) {
            console.log(`[Command: Play]: ${e}`);
            return message.client.Send({
                text: `${message.author.username} | –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e}`,
                message,
                color: "RED",
                type: "css"
            });
        }
    };
    //–í—ã–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    readonly #getInfoPlatform = (search: string, message: ClientMessage, voiceChannel: VoiceChannel | StageChannel): void => {
        if (search.match(UrlSrt)) {
            const TypeSearch = this.#typeSong(search);

            if (search.match(youtubeStr)) return getYouTube(TypeSearch, search, message, voiceChannel);
            else if (search.match(spotifySrt)) return getSpotify(TypeSearch, search, message, voiceChannel);
            else if (search.match(/vk.com/)) return getVk(TypeSearch, search, message, voiceChannel);
            else if (search.match(SoundCloudSrt)) return getSoundCloud(TypeSearch, search, message, voiceChannel);
            else if (search.match(/cdn.discordapp.com/) || message.attachments?.last()?.url) return getDiscord(TypeSearch, search, message, voiceChannel);
        }
        const SplitSearch = search.split(' ');
        const SearchType = SplitSearch[0].toLowerCase();

        //–ò—â–µ–º –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —Å—Å—ã–ª–∫–∞
        switch (SearchType) {
            case "sp": { //–ò—â–µ–º –≤ Spotify
                delete SplitSearch[0];
                return getSpotify("search", SplitSearch.join(' '), message, voiceChannel);
            }
            case "vk": { //–ò—â–µ–º –≤ VK
                delete SplitSearch[0];
                return getVk("search", SplitSearch.join(' '), message, voiceChannel);
            }
            case "sc": { //–ò—â–µ–º –Ω–∞ SoundCloud
                delete SplitSearch[0];
                return getSoundCloud("search", SplitSearch.join(' '), message, voiceChannel);
            }
            default: {
                //–ò—â–µ–º –Ω–∞ YouTube
                return getYouTube("search", SplitSearch.join(' '), message, voiceChannel);
            }
        }
    };

    /**
     * @description –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏
     * @param search
     * @private
     */
    readonly #typeSong = (search: string) => {
        if (search.match(/v=/) && search.match(/list=/)) return "change";
        else if (search.match(/playlist/)) return "playlist";
        else if (search.match(/album/) || search.match(/sets/)) return "album";
        return "track";
    };
}