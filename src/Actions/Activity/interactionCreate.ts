import { ActionRow, ActionRowBuilder, BaseInteraction,BaseMessageOptions, CommandInteractionOption, DMChannel, EmbedData, Events, GuildMember, Message, MessageEditOptions, MessagePayload, NewsChannel, PartialDMChannel, PermissionsBitField, TextChannel, ThreadChannel, User } from "discord.js";
import { ReactionMenu } from "@Embeds/ReactionMenu";
import { Duration } from "@Util/Duration";
import {MessageUtils} from "@Util/Message";
import {Command, ResolveData} from "@Command";
import { WatKLOK } from "@Client";
import { Action } from "@Action";
import {Logger} from "@Logger";
import {env} from "@env";

//Exports
export { ClientInteraction, ClientMessage };

//–ë–∞–∑–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–∞–Ω–¥—ã
const CoolDownBase = new Map<string, { time: number }>();
const OwnerIDS: string[] = env.get("bot.owners").split(",") || [env.get("bot.owners")];

export default class extends Action {
    public readonly name = Events.InteractionCreate;

    public readonly run = (message: ClientInteraction, client: WatKLOK): void => {
        //–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
        if ((message.user || message?.member?.user).bot) return;

        //–ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ
        if (message?.isCommand()) return new Interaction(message).runCommand;
        else if (message?.isButton()) {
            const { guild } = message, queue = client.queue.get(guild.id), { player } = queue;

            MessageUtils.send = {text: `${message.member}, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!`, color: "Green", message};

            switch (message.customId) {
                case "last": return void (queue.swap = 0);
                case "resume_pause": {
                    switch (queue.player.status) {
                        case "read": return player.pause;
                        case "pause": return player.resume;
                    }
                    break;
                }
                case "skip": {
                    message.client.commands.get("skip").run(message, ["1"]);
                    break;
                }
                case "repeat": {
                    queue.options.loop = queue.options.loop === "songs" ? "song": "songs";
                    MessageUtils.send = { text: `üé∂ | –ü–æ–≤—Ç–æ—Ä ${queue.options.loop}`, message, color: "Green", codeBlock: "css" };
                    break;
                }
            }
        }
    };
}

class Interaction {
    private readonly _message: ClientInteraction;
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
     */
    private get command() { return this._message.client.commands.get(this._message.commandName) ?? this._message.client.commands.find((cmd: Command) => cmd.aliases.includes(this._message.commandName)); };


    /**
     * @description –ø–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @private
     */
    private get args() { return this._message.options?._hoistedOptions?.map((f: CommandInteractionOption) => `${f.value}`); };


    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
     * @param command {ResolveData} –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
     */
    private set ChannelSend(command: ResolveData) {
        const message = this._message;
        //–ó–∞–ø—É—Å–∫–∞–µ–º ReactionMenu
        if ("callbacks" in command && command?.callbacks !== undefined) new ReactionMenu(command.embed, message, command.callbacks);

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else if ("text" in command) MessageUtils.send = { ...command, message };

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed
        else MessageUtils.send = { text: command.embed, message };
    };


    /**
     * @description –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
     */
    public get runCommand(): void {
        const args = this.args, command = this.command, message = this._message;
        const {author, guild, member} = message;

        //–ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º
        if (!command) return void (this.ChannelSend = { text: `${author}, —è –Ω–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!`, color: "DarkRed"});

        //–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        if (command.isOwner) {
            //–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if (!OwnerIDS.includes(author.id)) return void (this.ChannelSend = { text: `${author}, —Ç—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è! –ü–æ–¥–æ–∂–¥–∏ ${Duration.toConverting(CoolDownBase.get(author.id).time)}`, color: "DarkRed" });
        }

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if (CoolDownBase.get(author.id) && !OwnerIDS.includes(author.id)) return void (this.ChannelSend ={ text: `${author}, —Ç—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è! –ü–æ–¥–æ–∂–¥–∏ ${Duration.toConverting(CoolDownBase.get(author.id).time)}`, color: "DarkRed" });
        else {
            //–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CoolDown –±–∞–∑—É
            CoolDownBase.set(author.id, { time: command.isCLD });
            setTimeout(() => CoolDownBase.delete(author.id), command.isCLD * 1e3 ?? 5e3);
        }

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
        if (!message.guild) return void (this.ChannelSend = { text: `${author}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞!`, color: "DarkRed"});

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        const clientPermissions = this.checkPermission(command.permissions.client as string[], guild.members.me?.permissions);

        //–ï—Å–ª–∏ –ø—Ä–∞–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (clientPermissions) return void (this.ChannelSend = { text: `–í–Ω–∏–º–∞–Ω–∏–µ ${author.tag}\n–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞: ${clientPermissions}`, color: "DarkRed", codeBlock: "css" });

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPermissions = this.checkPermission(command.permissions.user as string[], member?.permissions);

        //–ï—Å–ª–∏ –ø—Ä–∞–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userPermissions) return void (this.ChannelSend = { text: `–í–Ω–∏–º–∞–Ω–∏–µ ${author.tag}\n–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞: ${userPermissions}`, color: "DarkRed", codeBlock: "css" });

        try {
            //–ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–∞–Ω–¥—É
            const runCommand = command.run(message, args ?? []);

            //–ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª
            if (runCommand) {
                if (!(runCommand instanceof Promise)) return void (this.ChannelSend = runCommand);
                runCommand.then(data => this.ChannelSend = data);
            }
        } catch (err) {
            //–°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
            this.ChannelSend = {text: `${author}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ${command.name}!`, color: "DarkRed"};

            //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
            Logger.error(err);
        }
    };


    /**
     * @description –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param permissions {string[]} –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
     * @param Fields {Readonly<PermissionsBitField>} –ì–¥–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
     */
    private readonly checkPermission = (permissions: string[], Fields: Readonly<PermissionsBitField>) => {
        const fail: string[] = [];

        if (permissions && permissions?.length > 0) {
            for (const permission of permissions) {
                if (!Fields.has(permission as any)) fail.push(permission as string);
                else break;
            }

            return fail.join(", ");
        }

        return null;
    };


    /**
     * @description –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª–∞—Å—Å
     * @param message {ClientInteraction} –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ slash
     */
    public constructor(message: ClientInteraction) {
        message.author = message?.member?.user ?? message?.user;

        this._message = message;
    };
}
//====================== ====================== ====================== ======================
/**
 * @description –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
 */
type Channels = DMChannel | PartialDMChannel | NewsChannel | TextChannel | ThreadChannel;
//====================== ====================== ====================== ======================
/**
 * @description –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤—ã–∑–≤–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ "/"
 */
interface ClientInteraction extends BaseInteraction {
    client: WatKLOK;
    member: GuildMember; customId: string; commandName: string; commandId: string; author: User;
    deferReply: () => Promise<void>; deleteReply: () => Promise<void>; options?: { _hoistedOptions: any[] };
    reply: ClientMessage["channel"]["send"];
    replied?: boolean;
    followUp: ClientInteraction["reply"];
}
//====================== ====================== ====================== ======================
/**
 * @description –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
type SendMessageOptions = string | MessagePayload | BaseMessageOptions | { embeds?: EmbedData[], components?: ActionRow<any> | ActionRowBuilder<any> };
//====================== ====================== ====================== ======================
/**
 * @description –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ <prefix>
 */
// @ts-ignore
interface ClientMessage extends Message {
    client: WatKLOK;
    channel: { send(options: SendMessageOptions & { fetchReply?: boolean }): Promise<ClientMessage> } & Channels;
    edit(content: SendMessageOptions | MessageEditOptions): Promise<ClientMessage>
    reply(options: SendMessageOptions): Promise<ClientMessage>
    user: null;
}