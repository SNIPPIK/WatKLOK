import {Queue} from "../Structures/Queue/Queue";
import {InputPlaylist, Song} from "../Structures/Queue/Song";
import {EmbedMessages} from "../Structures/EmbedMessages";
import {ActionRowBuilder, ButtonBuilder, ButtonStyle, Collection, ComponentType} from "discord.js";
import {ClientMessage} from "../../Handler/Events/Activity/interactiveCreate";
import {messageUtils} from "../../Structures/Handle/Command";
import {consoleTime} from "../../Core/Client/Client";

//–ö–Ω–æ–ø–∫–∏ –Ω–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞
const Buttons = new ActionRowBuilder().addComponents([
    new ButtonBuilder().setCustomId("last").setEmoji({id: "986009800867479572"}).setStyle(ButtonStyle.Secondary), //id: "986009800867479572" –∏–ª–∏ name: "‚è™"
    new ButtonBuilder().setCustomId("resume_pause").setEmoji({id: "986009725432893590"}).setStyle(ButtonStyle.Secondary), //id: "986009725432893590" –∏–ª–∏ name: "‚èØ"
    new ButtonBuilder().setCustomId("skip").setEmoji({id: "986009774015520808"}).setStyle(ButtonStyle.Secondary), //id: "986009774015520808" –∏–ª–∏ name: "‚è©"
    new ButtonBuilder().setCustomId("replay").setEmoji({id: "986009690716667964"}).setStyle(ButtonStyle.Secondary)] //id: "986009690716667964" –∏–ª–∏ name: "üîÉ"
);
//–ö–Ω–æ–ø–∫–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
const ButtonID = new Set(["skip", "resume_pause", "replay", "last"]);
//–°—Ç–∞—Ç—É—Å—ã –ø–ª–µ–µ—Ä–∞ –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
const PlayerStatuses = new Set(["idle", "paused", "autoPaused"]);

//–ë–∞–∑–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
const MessagesData = {
    messages: new Collection<string, ClientMessage>(), //new Map —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ id –∫–∞–Ω–∞–ª–∞
    timer: null as NodeJS.Timeout //–û–±—â–∏–π —Ç–∞–π–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
}

//–°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–µ–µ—Ä
export namespace MessagePlayer {
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 15 —Å–µ–∫
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @requires {MessageUpdater, pushCurrentSongMessage, Message}
     */
    export function toPlay(message: ClientMessage) {
        //–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ —É–¥–∞–ª—è–µ–º
        if (MessagesData.messages.get(message.channelId)) MessageUpdater.toRemove(message);

        setImmediate(() => {
            const msg = pushCurrentSongMessage(message);

            if (msg) msg.then(MessageUpdater.toPush).catch((err) => console.log(err));
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–ª–µ–µ—Ä –≤—ã–≤–æ–¥–∏—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param err {Error | string} –û—à–∏–±–∫–∞
     */
    export function toError(queue: Queue, err: Error | string = null) {
        const {client, channel} = queue.message;

        setImmediate(() => {
            try {
                const Embed = EmbedMessages.toError(client, queue, err);
                const WarningChannelSend = channel.send({embeds: [Embed]});

                WarningChannelSend.then(messageUtils.deleteMessage);
            } catch (e) {
                consoleTime(`[MessagePlayer]: [function: toError]: ${e.message}`);
            }
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param song {Song} –¢—Ä–µ–∫
     */
    export function toPushSong(queue: Queue, song: Song) {
        const {client, channel} = queue.message;

        setImmediate(() => {
            try {
                const EmbedPushedSong = EmbedMessages.toPushSong(client, song, queue);
                const PushChannel = channel.send({embeds: [EmbedPushedSong]});

                PushChannel.then(messageUtils.deleteMessage);
            } catch (e) {
                consoleTime(`[MessagePlayer]: [function: toPushSong]: ${e.message}`);
            }
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param playlist {InputPlaylist} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
     */
    export function toPushPlaylist(message: ClientMessage, playlist: InputPlaylist) {
        const {channel} = message;

        setImmediate(() => {
            try {
                const EmbedPushPlaylist = EmbedMessages.toPushPlaylist(message, playlist);
                const PushChannel = channel.send({embeds: [EmbedPushPlaylist]});

                PushChannel.then(messageUtils.deleteMessage);
            } catch (e) {
                consoleTime(`[MessagePlayer]: [function: toPushPlaylist]: ${e.message}`);
            }
        });
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @requires {MessageUpdater}
 */
function UpdateMessage(message: ClientMessage): void {
    const queue: Queue = message.client.queue.get(message.guild.id);

    //–ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!queue || !queue?.song) return MessageUpdater.toRemove(message);

    //–ï—Å–ª–∏ —É –ø–ª–µ–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (PlayerStatuses.has(queue.player.state.status)) return;

    setImmediate(() => {
        const CurrentPlayEmbed = EmbedMessages.toPlay(message.client, queue);

        //–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return message.edit({embeds: [CurrentPlayEmbed]}).catch((e) => consoleTime(`[MessageEmitter]: [function: UpdateMessage]: ${e.message}`));
    });
}
//====================== ====================== ====================== ======================
/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @requires {CreateCollector, Buttons}
 */
function pushCurrentSongMessage(message: ClientMessage): Promise<ClientMessage> {
    const queue: Queue = message.client.queue.get(message.guild.id);

    if (!queue?.song) return;

    const CurrentPlayEmbed = EmbedMessages.toPlay(message.client, queue);
    const sendMessage = message.channel.send({embeds: [CurrentPlayEmbed as any], components: [Buttons as any]});

    sendMessage.then((msg) => CreateCollector(msg, queue)); //–î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∫–Ω–æ–ø–∫–∏
    sendMessage.catch((e) => console.log(`[MessageEmitter]: [function: pushCurrentSongMessage]: ${e.message}`));

    return sendMessage;
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –∫–Ω–æ–ø–æ–∫
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @param queue {Queue} –û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
 */
function CreateCollector(message: ClientMessage, queue: Queue) {
    //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –∫–Ω–æ–ø–æ–∫
    const collector = message.createMessageComponentCollector({
        filter: (i) => ButtonID.has(i.customId), //–§–∏–ª—å—Ç—Ä—É–µ–º
        componentType: ComponentType.Button //–ö–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å
    });

    //–î–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∏–≤–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫
    collector.on("collect", (i) => {
        switch (i.customId) {
            case "resume_pause": { //–ï—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                switch (queue?.player.state.status) {
                    case "read": return message.client.commands.get("pause").run(i as any);
                    case "pause": return message.client.commands.get("resume").run(i as any);
                }
                return;
            }
            //–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏
            case "skip": return message.client.commands.get("skip").run(i as any);
            //–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
            case "replay": return message.client.commands.get("replay").run(i as any);
            //–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ—é –∏–∑ —Å–ø–∏—Å–∫–∞ –º—É–∑—ã–∫—É
            case "last": return queue?.swapSongs();
        }
    });

    return collector;
}

//–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
namespace MessageUpdater {
    /**
     * @description –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ <Message[]>
     * @param message {message} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @requires {StepCycleMessage}
     */
    export function toPush(message: ClientMessage) {
        if (MessagesData.messages.get(message.channelId)) return; //–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        MessagesData.messages.set(message.channelId, message); //–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É

        //–ï—Å–ª–∏ –≤ –±–∞–∑–µ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (MessagesData.messages.size === 1) setImmediate(StepCycleMessage);
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ <Message[]>, —Ç–∞–∫-–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–∏ —Ç–∞–π–º–µ—Ä
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @requires {Message}
     */
    export function toRemove(message: ClientMessage) {
        const Find = MessagesData.messages.get(message.channelId); //–ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ –±–∞–∑–µ
        if (!Find) return; //–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        if (Find.deletable) Find.delete().catch(() => undefined); //–ï—Å–ª–∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —É–¥–∞–ª—è–µ–º!
        MessagesData.messages.delete(message.channelId); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã

        //–ï—Å–ª–∏ –≤ –±–∞–∑–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        if (MessagesData.messages.size === 0) {
            //–ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if (typeof MessagesData.timer !== "undefined") clearTimeout(MessagesData.timer);
        }
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª–∞—Ö
     */
    function StepCycleMessage() {
        try {
            setImmediate(() => MessagesData.messages.forEach(UpdateMessage));
        } finally {
            MessagesData.timer = setTimeout(StepCycleMessage, 15e3);
        }
    }
}