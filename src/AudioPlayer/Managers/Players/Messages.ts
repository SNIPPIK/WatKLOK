import {ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType, Message, User} from "discord.js";
import {ClientMessage, UtilsMsg} from "@Client/interactionCreate";
import {MessageCycle} from "@Managers/Players/CycleStep";
import {EmbedMessages} from "@Structures/EmbedMessages";
import {InputPlaylist, Song} from "@Queue/Song";
import {consoleTime} from "../../../Client/Client";
import {Queue} from "@Queue/Queue";

//–ö–Ω–æ–ø–∫–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
const ButtonIDs = ["skip", "resume_pause", "replay", "last"];

//–°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–µ–µ—Ä
export namespace MessagePlayer {
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 15 —Å–µ–∫
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @requires {MessageCycle, pushCurrentSongMessage, Message}
     */
    export function toPlay(message: ClientMessage) {
        //–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ —É–¥–∞–ª—è–µ–º
        MessageCycle.toRemove(message.channelId);

        setImmediate(() => {
            const msg = pushCurrentSongMessage(message);

            if (msg) msg.then(MessageCycle.toPush).catch(console.log);
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–ª–µ–µ—Ä –≤—ã–≤–æ–¥–∏—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param err {Error | string} –û—à–∏–±–∫–∞
     */
    export function toError(queue: Queue, err: Error | string = null) {
        const {client, channel} = queue.message;

        setImmediate(() => {
            try {
                const Embed = EmbedMessages.toError(client, queue, err);
                const WarningChannelSend = channel.send({embeds: [Embed]});

                WarningChannelSend.then(UtilsMsg.deleteMessage);
            } catch (e) {
                return consoleTime(`[MessagePlayer]: [function: toError]: ${e.message}`);
            }
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param song {Song} –¢—Ä–µ–∫
     */
    export function toPushSong(queue: Queue, song: Song) {
        const {client, channel} = queue.message;

        setImmediate(() => {
            try {
                const EmbedPushedSong = EmbedMessages.toPushSong(client, song, queue);
                const PushChannel = channel.send({embeds: [EmbedPushedSong]});

                PushChannel.then(UtilsMsg.deleteMessage);
            } catch (e) {
                return consoleTime(`[MessagePlayer]: [function: toPushSong]: ${e.message}`);
            }
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param playlist {InputPlaylist} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
     */
    export function toPushPlaylist(message: ClientMessage, playlist: InputPlaylist) {
        const {channel} = message;

        setImmediate(() => {
            try {
                const EmbedPushPlaylist = EmbedMessages.toPushPlaylist(message, playlist);
                const PushChannel = channel.send({embeds: [EmbedPushPlaylist]});

                PushChannel.then(UtilsMsg.deleteMessage);
            } catch (e) {
                return consoleTime(`[MessagePlayer]: [function: toPushPlaylist]: ${e.message}`);
            }
        });
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @requires {CreateCollector}
 */
function pushCurrentSongMessage(message: ClientMessage): Promise<ClientMessage> {
    const queue: Queue = message.client.queue.get(message.guild.id);

    if (!queue?.song) return;

    const CurrentPlayEmbed = EmbedMessages.toPlay(message.client, queue);
    //–ö–Ω–æ–ø–∫–∏ –Ω–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞
    const Buttons = new ActionRowBuilder().addComponents([
        new ButtonBuilder().setCustomId("last").setEmoji({id: "986009800867479572"}).setStyle(ButtonStyle.Secondary), //id: "986009800867479572" –∏–ª–∏ name: "‚è™"
        new ButtonBuilder().setCustomId("resume_pause").setEmoji({id: "986009725432893590"}).setStyle(ButtonStyle.Secondary), //id: "986009725432893590" –∏–ª–∏ name: "‚èØ"
        new ButtonBuilder().setCustomId("skip").setEmoji({id: "986009774015520808"}).setStyle(ButtonStyle.Secondary), //id: "986009774015520808" –∏–ª–∏ name: "‚è©"
        new ButtonBuilder().setCustomId("replay").setEmoji({id: "986009690716667964"}).setStyle(ButtonStyle.Secondary)] //id: "986009690716667964" –∏–ª–∏ name: "üîÉ"
    );

    const sendMessage = message.channel.send({embeds: [CurrentPlayEmbed as any], components: [Buttons as any]});

    sendMessage.then((msg) => CreateCollector(msg, queue)); //–î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∫–Ω–æ–ø–∫–∏
    sendMessage.catch((e) => console.log(`[MessageEmitter]: [function: pushCurrentSongMessage]: ${e.message}`));

    return sendMessage;
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –∫–Ω–æ–ø–æ–∫
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @param queue {Queue} –û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
 */
function CreateCollector(message: ClientMessage, queue: Queue) {
    //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –∫–Ω–æ–ø–æ–∫
    const collector = message.createMessageComponentCollector({ filter: (i) => ButtonIDs.includes(i.customId), componentType: ComponentType.Button, time: 60e5 });
    const {player} = queue;
    const EmitPlayer = message.client.player;

    //–£–¥–∞–ª—è–µ–º —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
    player.once("idle", () => collector.stop());

    //–î–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∏–≤–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫
    collector.on("collect", (i): void => {
        message.author = i?.member?.user as User ?? i?.user;
        try { i.deferReply(); i.deleteReply(); } catch (e) {/*Notfing*/}

        //–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–ª–µ–µ—Ä–∞
        if (!player?.state || !player?.state?.status) return;

        switch (i.customId) {
            case "resume_pause": { //–ï—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                switch (player.state.status) {
                    case "read": return void EmitPlayer.pause(message);
                    case "pause": return void EmitPlayer.resume(message);
                }
                return;
            }
            //–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏
            case "skip": return void EmitPlayer.skip(message, 1);
            //–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
            case "replay": return void EmitPlayer.replay(message);
            //–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ—é –∏–∑ —Å–ø–∏—Å–∫–∞ –º—É–∑—ã–∫—É
            case "last": return queue?.swapSongs();
        }
    });

    return collector;
}