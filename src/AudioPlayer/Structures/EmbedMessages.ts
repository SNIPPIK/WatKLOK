import {WatKLOK} from "../../Core/Client/Client";
import {InputPlaylist, Song} from "./Queue/Song";
import {Queue} from "./Queue/Queue";
import {DurationUtils} from "../Managers/DurationUtils";
import {ClientMessage, EmbedConstructor} from "../../Handler/Events/Activity/interactiveCreate";
import {Colors} from "discord.js";
import {replacer} from "../../Structures/Handle/Command";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏
const Bar = {
    //–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
    Enable: true,

    //–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–æ–π
    empty: "‚îÄ",
    //–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
    full: "‚îÄ",
    //–ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –Ω–µ –±—É–¥–µ—Ç –¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É empty –∏ full
    button: "‚ö™"
}

//–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
export namespace Images {
    export const Verification = "https://media.discordapp.net/attachments/815897363188154408/1028014390299082852/Ok.png";
    export const NotVerification = "https://media.discordapp.net/attachments/815897363188154408/1028014389934174308/Not.png";
    export const NotFound = "https://media.discordapp.net/attachments/815897363188154408/1028014390752055306/WTF.png";
    export const NotImage = "https://media.discordapp.net/attachments/815897363188154408/1028014391146328124/MusciNote.png";
}

//–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ EMBED –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MessagePlayer)
export namespace EmbedMessages {
    /**
    * @description Message —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
    * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
    * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
    */
    export function toPlay(client: WatKLOK, queue: Queue): EmbedConstructor {
        const song = queue.song;

        return { color: song.color,
            author: { name: replacer.replaceText(song.author.title, 45, false), url: song.author.url,
                iconURL: song.author.isVerified === undefined ? Images.NotFound : song.author.isVerified ? Images.Verification : Images.NotVerification },
            thumbnail: { url: song.author?.image?.url ?? Images.NotImage },
            fields: toPlayFunctions.getFields(queue, client),
            image: { url: song.image?.url ?? null },
            footer: { text: `${song.requester.username} | ${DurationUtils.getTimeQueue(queue)} | üé∂: ${queue.songs.length}`, iconURL: song.requester.avatarURL() }
        };
    }
    //====================== ====================== ====================== ======================
    /**
     * @description Message —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
     * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
     * @param color {Song<color>} –¶–≤–µ—Ç
     * @param song {Song} –¢—Ä–µ–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
     * @param songs {Queue<songs>} –í—Å–µ —Ç—Ä–µ–∫–∏
     */
    export function toPushSong(client: WatKLOK, song: Song, {songs}: Queue): EmbedConstructor {
        const { color, author, image, title, url, duration, requester } = song;

        return { color,
            author: { name: replacer.replaceText(author.title, 45, false), iconURL: author?.image?.url ?? Images.NotImage, url: author.url },
            thumbnail: { url: !image?.url ? author?.image.url : image?.url ?? Images.NotImage },
            fields: [{ name: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å", value: `**‚ùØ** [${replacer.replaceText(title, 40, true)}](${url}})\n**‚ùØ** [\`\`${duration.full}]\`\`` }],
            footer: { text: `${requester.username} | ${DurationUtils.getTimeQueue(songs)} | üé∂: ${songs.length}`, iconURL: requester.avatarURL() }
        };
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–∑–¥–∞–µ–º Message —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
     * @param client {WatKLOK} –ë–æ—Ç
     * @param DisAuthor {ClientMessage.author} –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param playlist {InputPlaylist} –ü–ª–µ–π–ª–∏—Å—Ç
     * @param author {InputPlaylist.author} –ê–≤—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞
     */
    export function toPushPlaylist({client, author: DisAuthor}: ClientMessage, playlist: InputPlaylist): EmbedConstructor {
        const { author, image, url, title, items } = playlist;

        return { color: Colors.Blue,
            author: { name: author?.title, iconURL: author?.image?.url ?? Images.NotImage, url: author?.url },
            thumbnail: { url: typeof image === "string" ? image : image.url ?? Images.NotImage },
            description: `–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç [${title}](${url})`,
            timestamp: new Date(),
            footer: { text: `${DisAuthor.username} | ${DurationUtils.getTimeQueue(items)} | üé∂: ${items?.length}`, iconURL: DisAuthor.displayAvatarURL({}) }
        };
    }
    //====================== ====================== ====================== ======================
    /**
    * @description Message —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
    * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
    * @param color {Song<color>} –¶–≤–µ—Ç
    * @param songs {Queue<songs>} –í—Å–µ —Ç—Ä–µ–∫–∏
    * @param err {Error} –û—à–∏–±–∫–∞ –≤—ã–¥–∞–Ω–Ω–∞—è –ø–ª–µ–µ—Ä–æ–º
    */
    export function toError(client: WatKLOK, {songs, song}: Queue, err: Error | string): EmbedConstructor {
        const {color, author, image, title, url, requester} = song;

        return { color,
            description: `\n[${title}](${url})\n\`\`\`js\n${err}...\`\`\``,
            author: { name: replacer.replaceText(author.title, 45, false), url: author.url,
                iconURL: author.isVerified === undefined ? Images.NotFound : author.isVerified ? Images.Verification : Images.NotVerification },
            thumbnail: { url: image?.url ?? Images.NotImage },
            timestamp: new Date(),
            footer: { text: `${requester.username} | ${DurationUtils.getTimeQueue(songs)} | üé∂: ${songs.length}`, iconURL: requester?.avatarURL() ?? client.user.displayAvatarURL() }
        };
    }
}
namespace toPlayFunctions {
    /**
     * @description –°–æ–∑–¥–∞–µ–º Message<Fields>
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
     */
    export function getFields(queue: Queue, client: WatKLOK): { name: string, value: string }[] {
        const {songs, song, player} = queue;
        const VisualDuration = playTime.toString(song.duration, player.streamDuration);
        //–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        const fields = [{ name: "–©–∞—Å –∏–≥—Ä–∞–µ—Ç", value: `**‚ùØ** [${replacer.replaceText(song.title, 29, true)}](${song.url})\n${VisualDuration}` }];

        //–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        if (songs.length > 1) fields.push({ name: "–ü–æ—Ç–æ–º", value: `**‚ùØ** [${replacer.replaceText(songs[1].title, 29, true)}](${songs[1].url})` });
        return fields;
    }
}

namespace playTime {
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–∫–∞ –¥–ª—è embed —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param duration
     * @param playDuration
     */
    export function toString(duration: { seconds: number, full: string }, playDuration: number) {
        if (duration.full === "Live" || !Bar.Enable) return `\`\`[${duration}]\`\``;

        const parsedDuration = DurationUtils.ParsingTimeToString(playDuration);
        const progress = matchBar(playDuration as number, duration.seconds, 20);
        const string = `**‚ùØ** \`\`[${parsedDuration} \\ ${duration.full}]\`\` \n\`\``;

        return `${string}${progress}\`\``;
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
     * @param currentTime {number} –¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º—è
     * @param maxTime {number} –ú–∞–∫—Å –≤—Ä–µ–º–µ–Ω–∏
     * @param size {number} –ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
     */
    function matchBar(currentTime: number, maxTime: number, size: number = 15) {
        try {
            const CurrentDuration = isNaN(currentTime) ? 0 : currentTime;
            const progressSize = Math.round(size * (CurrentDuration / maxTime));
            const progressText = Bar.full.repeat(progressSize);
            const emptyText = Bar.empty.repeat(size - progressSize);

            return `${progressText}${Bar.button}${emptyText}`;
        } catch (err) {
            if (err === "RangeError: Invalid count value") return "**‚ùØ** \`\`[Error value]\`\`";
            return "**‚ùØ** \`\`[Loading]\`\`";
        }
    }
}