import {FailRegisterPlatform, SearchPlatforms, SupportPlatforms, supportPlatforms, SupportType, TypePlatform} from "../SongSupport";
import {ClientInteractive, ClientMessage, UtilsMsg} from "@Client/interactionCreate";
import {replacer, ResolveData} from "@Structures/Handle/Command";
import {ArraySort} from "@Handler/Modules/Object/ArraySort";
import {InputPlaylist, InputTrack} from "@Queue/Song";
import {Message, StageChannel, VoiceChannel} from "discord.js";
import {DurationUtils} from "@Managers/DurationUtils";
import {ReactionMenuSettings} from "@db/Config.json";

//–î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
interface Options {
    type?: SupportType
    platform?: supportPlatforms
    search: string
    message: ClientInteractive
    voiceChannel: VoiceChannel | StageChannel
}

const UrlSrt = /^(https?:\/\/)/gi;
const emoji = ReactionMenuSettings.emojis.cancel;


export namespace Handle {
    /**
     * @description –ò—â–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –ø–ª–µ–µ—Ä –¥–∞–Ω–Ω—ã–µ
     * @param options {Options} –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    export function toPlayer(options: Options): Promise<ResolveData> | ResolveData {
        const {search, message, voiceChannel} = options;
        const {client, author} = message;
        const type = IdentifyType.track(search); //–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        const platform = IdentifyType.platform(search); //–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
        const parsedSearch = IdentifyType.Argument(search, type, platform); //–ü—Ä–∞–≤–∏—Ç –æ—à–∏–±–∫—É —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

        //–ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if (FailRegisterPlatform.has(platform)) return {
            text: `${author}, —è –Ω–µ –º–æ–≥—É –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã **${platform}**\n –ü—Ä–∏—á–∏–Ω–∞: [**Authorization data not found**]`, color: "DarkRed", codeBlock: "css"
        };

        const findPlatform = SupportPlatforms[platform]; //–ò—â–µ–º –≤ —Å–ø–∏—Å–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        const findType = (findPlatform as any)[type]; //–ò—â–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞

        if (!findPlatform) return { text: `${author}, —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ **${platform}**!`, color: "DarkRed" };
        else if (!findType) return { text: `${author}, —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞!\n–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ **${type}**!`, color: "DarkRed" };

        const runCallback = findType(parsedSearch) as Promise<InputTrack | InputPlaylist | InputTrack[]>;

        //–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
        runCallback.catch((err) => UtilsMsg.createMessage({ text: `${author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã!\n–ü—Ä–∏—á–∏–Ω–∞: ${err}`, color: "DarkRed", message }));

        return runCallback.then((data: InputTrack | InputPlaylist | InputTrack[]): ResolveData => {
            if (!data) return { text: `${author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã!`, color: "Yellow"};

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—Ä–µ–∫
            if (data instanceof Array) return SearchMessage.toSend(data, {...options, platform, type});

            //–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –≤ GuildQueue
            client.player.play(message as any, voiceChannel, data);

            //–°–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ç—Ä–µ–∫ –±—ã–ª –Ω–∞–π–¥–µ–Ω
            if (type === "track") return {text: `–ù–∞–π–¥–µ–Ω üîç | ${type}\n‚ûú ${data.title}`, color: "Yellow", codeBlock: "css"};
        });
    }
}

namespace IdentifyType {
    /**
     * @description –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏
     * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    export function track(search: string): SupportType {
        if (!search) return "track"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

        //–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞, —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç, –∞–ª—å–±–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–∫
        if (search.match(UrlSrt)) {
            if (search.match(/playlist/)) return "playlist";
            else if (search.match(/album/) || search.match(/sets/)) return "album";
            return "track";
        }
        return "search";
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    export function platform(search: string) {
        if (!search) return "DISCORD"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

        if (search.match(UrlSrt)) return TypePlatform(search);
        const SplitSearch = search.split(' ');
        const platform = SplitSearch[0] as "yt" | "vk" | "sp" | "sc";

        if (SearchPlatforms[platform]) return SearchPlatforms[platform] as supportPlatforms;
        return "YOUTUBE";
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     * @param argument {string} –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @param platform {supportPlatforms} –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
     * @param type {SupportType} –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
     */
    export function Argument(argument: string, type: SupportType, platform: supportPlatforms) {
        if (argument.match(UrlSrt)) return `http${argument.split("http")[1]}`; //–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Å—ã–ª–∫–∞
        else if (type === "search" && argument.includes(platform)) return argument.split(platform)[1]; //–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —ç—Ç–æ –ø–æ–∏—Å–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        return argument;
    }
}

namespace SearchMessage {
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
     * @param results {InputTrack[]} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @param options {Options}
     * @requires {Reaction, deleteMessage}
     */
    export function toSend(results: InputTrack[], options: Options): ResolveData {
        const {message, platform} = options;
        const {author, client} = message;

        if (results.length < 1) return { text: `${author} | –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!`, color: "DarkRed" };

        const choice = `–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ ${results.length}`;
        const requester = `[–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform} | –ó–∞–ø—Ä–æ—Å–∏–ª: ${author.username}]`;
        const songsList = ArraySort<InputTrack>(15, results, (track, index ) => {
            const Duration = platform === "YOUTUBE" ? track.duration.seconds : DurationUtils.ParsingTimeToString(parseInt(track.duration.seconds)); //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
            const NameTrack = `[${replacer.replaceText(track.title, 80, true)}]`; //–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            const DurationTrack = `[${Duration ?? "LIVE"}]`; //–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
            const AuthorTrack = `[${replacer.replaceText(track.author.title, 12, true)}]`; //–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞

            return `${index+1} ‚ûú ${DurationTrack} | ${AuthorTrack} | ${NameTrack}`;
        });
        const callback = (msg: ClientMessage) => {
            //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
            const collector = UtilsMsg.createCollector(message.channel as any, (m) => {
                const messageNum = parseInt(m.content);
                return !isNaN(messageNum) && messageNum <= results.length && messageNum > 0 && m.author.id === author.id;
            });

            //–î–µ–ª–∞–µ–º —á—Ç–æ-–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏ —É–¥–∞–ª—è–ª—Å—è —Å–±–æ—Ä—â–∏–∫
            UtilsMsg.createReaction(msg, emoji,
                (reaction, user) => reaction.emoji.name === emoji && user.id !== client.user.id,
                () => {
                    UtilsMsg.deleteMessage(msg, 1e3); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    collector?.stop();
                },
                30e3
            );

            //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —á–∏—Å–ª–∞
            collector.once("collect", (m: any): void => {
                setImmediate(() => {
                    [msg, m].forEach(UtilsMsg.deleteMessage); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    collector?.stop(); //–£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–±–æ—Ä—â–∏–∫

                    //–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∑–∞—Ç–µ–º –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
                    const url = results[parseInt(m.content) - 1].url;
                    return Handle.toPlayer({...options, type: "track", search: url});
                });
            });
        };

        return {text: `${choice}\n${requester}\n\n${songsList}`, codeBlock: "css", notAttachEmbed: true, thenCallbacks: [callback]}
    }
}