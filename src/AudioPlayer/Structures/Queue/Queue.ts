import {StageChannel, VoiceChannel} from "discord.js";
import {AudioPlayer} from "../../Player/AudioPlayer";
import {Song} from "./Song";
import {ClientMessage} from "../../../Handler/Events/Activity/Message";
import {PlayerEventsCallBacks} from "../../Manager/PlayerManager";
import {VoiceConnection} from "@discordjs/voice";
import {MessagePlayer} from "../../Manager/PlayerMessages";
import {Decoder} from "../Media/Decoder";

export type AudioFilters = Array<string> | Array<string | number>;

//–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
export class Queue {
    #Timer: NodeJS.Timeout = null; //–¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
    #hasDestroying: boolean = false; //–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è (–∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ)
    readonly #songs: Array<Song> = []; //–í—Å–µ —Ç—Ä–µ–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–¥–µ—Å—å
    readonly #player: AudioPlayer = new AudioPlayer(); //–°–∞–º –ø–ª–µ–µ—Ä
    //–ö–∞–Ω–∞–ª—ã (message: TextChannel, voice: VoiceChannel)
    readonly #channels: { message: ClientMessage, voice: VoiceChannel | StageChannel };
    readonly #options: { random: boolean, loop: "song" | "songs" | "off", stop: boolean } = { //–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        random: false, //–†–∞–Ω–¥–æ–º–Ω—ã–µ —Ç—Ä–µ–∫–∏ (–∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤ –ø–ª–µ–µ—Ä–µ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Ä–∞–∑–Ω–∞—è –º—É–∑—ã–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏)
        loop: "off", //–¢–∏–ø –ø–æ–≤—Ç–æ—Ä–∞ (off, song, songs)
        stop: false, //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–∏–ª –º—É–∑—ã–∫–∏ –∏–ª–∏ –º—É–∑—ã–∫–∞ —Å–∞–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
    };
    #filters: Array<string> | Array<string | number> = [];  //–§–∏–ª—å—Ç—Ä—ã –¥–ª—è FFmpeg

    //–°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    public constructor(message: ClientMessage, voice: VoiceChannel) {
        this.#channels = {message, voice};

        this.player.on("idle", () => PlayerEventsCallBacks.onIdlePlayer(this));
        this.player.on("error", (err, isSkip) => PlayerEventsCallBacks.onErrorPlayer(err, this, isSkip));
    };

    //–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
    public get voice() { return this.#channels.voice; };
    public set voice(voiceChannel) { this.#channels.voice = voiceChannel; };

    //–°–æ–æ–±—â–µ–Ω–∏–µ
    public get message() { return this.#channels.message; };
    public set message(message) { this.#channels.message = message; };

    //–§–∏–ª—å—Ç—Ä—ã
    public get filters() { return this.#filters; };

    //–í—Å–µ —Ç—Ä–µ–∫–∏
    public get songs() { return this.#songs; };
    //–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    public get song(): Song { return this.songs[0]; };

    //–î–∞–Ω–Ω—ã–µ –ø–ª–µ–µ—Ä–∞
    public get player() { return this.#player; };

    //–ù–∞—Å—Ç—Ä–æ–π–∫–∏
    public get options() { return this.#options; };

    //–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
    public get connection(): VoiceConnection { return this.player.voices.find((voice) => voice.joinConfig.channelId === this.voice.id); };

    //–°–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å
    public get guild() { return this.message.guild; };

    /**
     * @description –ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —Ç—Ä–µ–∫–∏
     * @param num {number} –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã
     */
    public readonly swapSongs = (num?: number) => {
        if (this.songs.length === 1) return this.player.stop();

        const SetNum = num ? num : this.songs.length - 1;
        const ArraySongs: Array<Song> = this.songs;
        const hasChange = ArraySongs[SetNum];

        ArraySongs[SetNum] = ArraySongs[0];
        ArraySongs[0] = hasChange;
        this.player.stop();
        return;
    };
    //–£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
    public readonly cleanup = (sendDelQueue: boolean = true) => {
        const message = this.message
        const {client, guild} = message;

        //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        if (message?.deletable) message?.delete().catch(() => undefined);

        //–ï—Å–ª–∏ –ø–ª–µ–µ—Ä –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω
        if (this.player) {
            //–£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø–ª–µ–µ—Ä–∞
            if (this.connection) this.player.unsubscribe({connection: this.connection});

            this.player.stop();
        }

        clearTimeout(this.#Timer);

        //–ï—Å–ª–∏ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
        if (sendDelQueue && client.queue.get(guild.id)) {
            if (this.options.stop) client.sendMessage({text: "üéµ | –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞", message, type: "css"});
            else client.sendMessage({text: "üéµ | –ú—É–∑—ã–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å", message, type: "css"});
        }

        client.queue.delete(guild.id);
    };
    //–£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    public readonly TimeDestroying = (state: "start" | "cancel"): void => {
        const player = this.player;

        //–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞!
        if (state === "start") {
            if (this.#hasDestroying) return;

            this.#Timer = setTimeout(() => this.cleanup(false), 20e3);
            this.#hasDestroying = true;
            player.pause();
        } else { //–û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä
            if (!this.#hasDestroying) return;

            clearTimeout(this.#Timer);
            player.resume();
            this.#hasDestroying = false;
        }
    };
    //–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
    public readonly push = (song: Song, sendMessage: boolean = false): void => {
        if (sendMessage) MessagePlayer.toPushSong(this, song);

        this.songs.push(song);
    };
    //–í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    public readonly play = (seek: number = 0) => {
        if (!this.song) return this.cleanup();

        //–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ resource
        this.song.resource(seek).then((url: string) => {
            if (!url) return this.player.emit("error", "[AudioPlayer]: Audio resource not found!", true);
            const streamingData = new Decoder({url, seek, filters: this.song.isLive ? [] : this.filters});

            return this.player.readStream(streamingData);
        }).catch((err) => this.player.emit("error", `[AudioPlayer]: ${err}`, true));

        if (!seek) {
            this.message.client.console(`[GuildID: ${this.guild.id}]: ${this.song.title}`); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
            MessagePlayer.toPlay(this.message); //–ï—Å–ª–∏ —Å—Ç—Ä–∏–º –Ω–µ –ø—É—Å—Ç—ã—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
    };
}