import {StageChannel, VoiceChannel} from "discord.js";
import {AudioPlayer} from "../../Player/AudioPlayer";
import {Song} from "./Song";
import {VoiceConnection} from "@discordjs/voice";
import {MessagePlayer} from "../../Manager/MessagePlayer";
import {ClientMessage} from "../../../Handler/Events/Activity/Message";

export type LoopType = "song" | "songs" | "off";
export type AudioFilters = Array<string> | Array<string | number>;

// –û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–æ–≤
export class Queue {
    #Timer: NodeJS.Timeout = null; //–¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
    #hasDestroying: boolean = false; //–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è (–∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ)

    readonly #_player: AudioPlayer; //–°–∞–º –ø–ª–µ–µ—Ä
    //–ö–∞–Ω–∞–ª—ã (message: TextChannel, voice: VoiceChannel, connection: VoiceConnection)
    readonly #_channels: { message: ClientMessage, voice: VoiceChannel | StageChannel, connection: VoiceConnection };
    readonly #_options: { random: boolean, loop: LoopType, stop: boolean } = { //–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        random: false, //–†–∞–Ω–¥–æ–º–Ω—ã–µ —Ç—Ä–µ–∫–∏ (–∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤ –ø–ª–µ–µ—Ä–µ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Ä–∞–∑–Ω–∞—è –º—É–∑—ã–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏)
        loop: "off", //–¢–∏–ø –ø–æ–≤—Ç–æ—Ä–∞ (off, song, songs)
        stop: false, //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–∏–ª –º—É–∑—ã–∫–∏ –∏–ª–∏ –º—É–∑—ã–∫–∞ —Å–∞–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
    };
    public audioFilters: Array<string> | Array<string | number> = [];  //–§–∏–ª—å—Ç—Ä—ã –¥–ª—è FFmpeg
    public songs: Array<Song> = []; //–í—Å–µ —Ç—Ä–µ–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–¥–µ—Å—å

    //–°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    public constructor(message: ClientMessage, voice: VoiceChannel) {
        this.#_player = new AudioPlayer();
        this.#_channels = { message, voice, connection: null};

        this.player.on("idle", () => onPlayerFunction.onIdlePlayer(message));
        this.player.on("error", (err: any) => onPlayerFunction.onErrorPlayer(err, message));
    };

    /**
     * @description –ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —Ç—Ä–µ–∫–∏
     * @param customNum {number} –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã
     */
    public readonly swapSongs = (customNum?: number) => {
        if (this.songs.length === 1) return this.player.stop();

        const SetNum = customNum ? customNum : this.songs.length - 1;
        const ArraySongs: Array<Song> = this.songs;
        const hasChange = ArraySongs[SetNum];

        ArraySongs[SetNum] = ArraySongs[0];
        ArraySongs[0] = hasChange;
        this.player.stop();
        return;
    };

    //–î–∞–Ω–Ω—ã–µ –ø–ª–µ–µ—Ä–∞
    public get player() {
        return this.#_player;
    };
    //–í—Å–µ –∫–∞–Ω–∞–ª—ã
    public get channels() {
        return this.#_channels;
    };
    //–ù–∞—Å—Ç—Ä–æ–π–∫–∏
    public get options() {
        return this.#_options;
    };

    //–£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
    public readonly cleanup = (sendDelQueue: boolean = true) => {
        const message = this.channels.message
        const {client, guild} = this.channels.message;
        const Queue = client.queue.get(guild.id);

        //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
        if (!Queue) return;
        const {channels, player, options} = Queue;

        //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        if (message?.deletable) message?.delete().catch(() => undefined);
        if (player) {
            player.unsubscribe({connection: channels.connection});
            player.stop();
        }
        [Queue.songs, Queue.audioFilters].forEach(data => data = null);

        if (sendDelQueue) {
            if (options.stop) client.sendMessage({text: "üéµ | –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞", message, type: "css"});
            else client.sendMessage({text: "üéµ | –ú—É–∑—ã–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å", message, type: "css"});
        }

        clearTimeout(this.#Timer);
        client.queue.delete(guild.id);
    };
    //–£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    public readonly TimeDestroying = (state: "start" | "cancel"): void => {
        const player = this.player;

        //–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞!
        if (state === "start") {
            if (this.#hasDestroying) return;

            this.#Timer = setTimeout(() => this.cleanup(false), 30e3);
            this.#hasDestroying = true;
            player.pause();
        } else { //–û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä
            if (!this.#hasDestroying) return;

            clearTimeout(this.#Timer);
            player.resume();
            this.#hasDestroying = false;
        }
    };
}

namespace onPlayerFunction {
    /**
     * @description –ö–æ–≥–¥–∞ –ø–ª–µ–µ—Ä –∑–∞–≤–µ—Ä—à–∏—Ç –ø–µ—Å–Ω—é, –æ–Ω –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @requires {isRemoveSong}
     * @private
     */
    export function onIdlePlayer(message: ClientMessage): void {
        const {client, guild} = message;
        const queue: Queue = client.queue.get(guild.id);

        setTimeout(() => {
            if (queue?.songs) isRemoveSong(queue); //–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø loop

            //–†–∞–Ω–¥–æ–º–∏–º –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏
            if (queue?.options?.random) {
                const RandomNumSong = Math.floor(Math.random() * queue.songs.length)
                queue.swapSongs(RandomNumSong);
            }

            return queue.player.play(message); //–í–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫
        }, 500);
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ö–æ–≥–¥–∞ –ø–ª–µ–µ—Ä –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É, –æ–Ω –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
     * @param err {Error | string} –û—à–∏–±–∫–∞
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @private
     */
    export function onErrorPlayer(err: Error | string, message: ClientMessage): void {
        const queue: Queue = message.client.queue.get(message.guild.id);

        //–í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        MessagePlayer.toError(message, queue.songs[0], err);

        queue.songs.shift();
        setTimeout(() => queue.player.play(message), 1e3);
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –ü–æ–≤—Ç–æ—Ä –º—É–∑—ã–∫–∏
 * @param queue {Queue} –û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
 */
function isRemoveSong({options, songs}: Queue): void {
    switch (options?.loop) {
        case "song": return;
        case "songs": return void songs.push(songs.shift());
        default: return void songs.shift();
    }
}