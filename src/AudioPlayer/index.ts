import {ClientMessage, UtilsMsg} from "@Client/interactionCreate";
import {DurationUtils} from "@Structures/Durations";
import {Voting} from "@db/Config.json";
import {VoiceState} from "discord.js";
import {toQueue} from "@Queue/Queue";
import {Voice} from "@VoiceManager";
import {Queue} from "@Queue/Queue";
import {Song} from "@Queue/Song";
import {Filter} from "@FFspace";


//–ó–¥–µ—Å—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–ª–µ–µ—Ä–æ–º
export namespace Player {
    export const handleContent = toQueue;
    /**
     * @description –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function resume(message: ClientMessage): void {
        const {client, guild} = message;
        const {player, song}: Queue = client.queue.get(guild.id);
        const {title}: Song = song;

        //–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞ –ø–∞—É–∑–µ
        player.resume();
        return UtilsMsg.createMessage({text: `‚ñ∂Ô∏è | Resume song | ${title}`, message, codeBlock: "css", color: "Green"});
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function pause(message: ClientMessage): void {
        const {client, guild} = message;
        const {player, song}: Queue = client.queue.get(guild.id);
        const {title}: Song = song;

        //–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∏–≥—Ä–∞–µ—Ç
        player.pause();
        return UtilsMsg.createMessage({text: `‚è∏ | Pause song | ${title}`, message, codeBlock: "css", color: "Green"});
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –£–±–∏—Ä–∞–µ–º –º—É–∑—ã–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param arg {string} –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ü—Ä–∏–º–µ—Ä: –∫–æ–º–∞–Ω–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç1 –∞—Ä–≥—É–º–µ–Ω—Ç2
     * @requires {toStop}
     */
    export function remove(message: ClientMessage, arg: number = 1): void {
        const {client, guild, author} = message;
        const queue: Queue = client.queue.get(guild.id);
        const {player, songs} = queue;
        const {title, url}: Song = songs[arg - 1];

        setImmediate(() => {
            //–ï—Å–ª–∏ –º—É–∑—ã–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑-–∑–∞ –ø–ª–µ–µ—Ä–∞
            if (!player.hasSkipped) return UtilsMsg.createMessage({ text: `${author}, ‚ö† –ú—É–∑—ã–∫–∞ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç!`, message, color: "Yellow" });

            //–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            Vote(message, queue, (win) => {
                if (win) {
                    //–£–±–∏—Ä–∞–µ–º —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    queue.songs.splice(arg - 1, 1);

                    //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ
                    if (arg === 1) toStop(message);

                    //–°–æ–æ–±—â–∞–µ–º –∫–∞–∫–æ–π —Ç—Ä–µ–∫ –±—ã–ª —É–±—Ä–∞–Ω
                    return UtilsMsg.createMessage({text: `‚è≠Ô∏è | Remove song | ${title}`, message, codeBlock: "css", color: "Green"});
                } else {
                    //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
                    return UtilsMsg.createMessage({ text: `${author}, —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫ [${title}](${url}) –Ω–µ –≤—ã—à–ª–æ!`, message, color: "Yellow" });
                }
            }, "—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", arg);
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param seek {number} –º—É–∑—ã–∫–∞ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Å –Ω—É–∂–Ω–æ–π —Å–µ–∫—É–Ω–¥—ã (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ ffmpeg)
     * @requires {ParsingTimeToString}
     */
    export function seek(message: ClientMessage, seek: number): void {
        const {client, guild, author} = message;
        const queue: Queue = client.queue.get(guild.id);
        const {song, play, player} = queue;
        const {title}: Song = song;

        //–ï—Å–ª–∏ –º—É–∑—ã–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑-–∑–∞ –ø–ª–µ–µ—Ä–∞
        if (!player.hasSkipped) return UtilsMsg.createMessage({ text: `${author}, ‚ö† –ú—É–∑—ã–∫–∞ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç!`, message, color: "Yellow" });

        //–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        Vote(message, queue, (win) => {
            if (win) {
                play(seek); //–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ —Å <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º –∫–æ–¥–∞>

                //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –≤—Ä–µ–º–µ–Ω–∏
                return UtilsMsg.createMessage({ text: `‚è≠Ô∏è | Seeking to [${DurationUtils.ParsingTimeToString(seek)}] song | ${title}`, message, codeBlock: "css", color: "Green" });
            } else return UtilsMsg.createMessage({ text: `${author}, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!`, message, codeBlock: "css", color: "Yellow" });
        }, "–ø—Ä–æ–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç—Ä–µ–∫–µ", 1);
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param args {number} –°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
     */
    export function skip(message: ClientMessage, args: number): void {
        if (args) return skipSong(message, args);
        return skipSong(message);
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function replay(message: ClientMessage): void {
        const {client, guild, author} = message;
        const queue: Queue = client.queue.get(guild.id);
        const {song, play} = queue;
        const {title}: Song = song;

        //–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        Vote(message, queue, (win) => {
            if (win) {
                play();

                //–°–æ–æ–±—â–∞–µ–º –æ —Ç–æ–º —á—Ç–æ –º—É–∑—ã–∫–∞ –Ω–∞—á–∞—Ç–∞ —Å –Ω–∞—á–∞–ª–∞
                return UtilsMsg.createMessage({text: `üîÇ | Replay | ${title}`, message, color: "Green", codeBlock: "css"});
            } else return UtilsMsg.createMessage({ text: `${author}, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!`, message, codeBlock: "css", color: "Yellow" });
        }, "–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞", 1);
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–ª–µ–µ—Ä–∞
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param filter {typeof FFspace.getFilter} –°–∞–º —Ñ–∏–ª—å—Ç—Ä
     * @param arg
     */
    export function filter(message: ClientMessage, filter: Filter, arg: number): Promise<void> | void {
        const {client, guild, author} = message;
        const queue: Queue = client.queue.get(guild.id);
        const {player, play}: Queue = queue;
        const seek: number = player.streamDuration;

        const isFilter = !!queue.filters.find((Filter) => typeof Filter === "number" ? null : filter.names.includes(Filter));
        const name = filter.names[0];

        //–ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏
        if (isFilter) {
            const index = queue.filters.indexOf(name);

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å
            if (arg && filter.args) {
                const isOkArgs = arg >= (filter.args as number[])[0] && arg <= (filter.args as number[])[1];

                //–ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç
                if (!isOkArgs) return UtilsMsg.createMessage({text: `${author.username} | Filter: ${name} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!`, message, color: "Yellow", codeBlock: "css" });

                //–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                Vote(message, queue, (win) => {
                    //–ò–∑–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞
                    if (win) {
                        queue.filters[index + 1] = arg;

                        play(seek);

                        return UtilsMsg.createMessage({ text: `${author.username} | Filter: ${name} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ ${arg}!`, message, codeBlock: "css", color: "Green" });
                    } else return UtilsMsg.createMessage({ text: `${author.username}, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!`, message, codeBlock: "css", color: "Yellow" });
                }, "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞");
                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
            } else {
                //–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                Vote(message, queue, (win) => {
                    //–ò–∑–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞
                    if (win) {
                        if (filter.args) queue.filters.splice(index, 2); //–£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ –∞—Ä–≥—É–º–µ–Ω—Ç
                        else queue.filters.splice(index, 1); //–£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä

                        play(seek);

                        return UtilsMsg.createMessage({text: `${author.username} | Filter: ${name} –æ—Ç–∫–ª—é—á–µ–Ω!`, color: "Green", message, codeBlock: "css"});
                    } else return UtilsMsg.createMessage({ text: `${author.username}, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!`, message, codeBlock: "css", color: "Yellow" });
                }, "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞");
            }
            //–ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å
        } else {
            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å
            if (arg && filter.args) {
                //–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                Vote(message, queue, (win) => {
                    if (win) {
                        queue.filters.push(name);
                        queue.filters.push(arg as any);

                        play(seek);

                        return UtilsMsg.createMessage({text: `${author.username} | Filter: ${name}:${arg} –≤–∫–ª—é—á–µ–Ω!`, color: "Green", message, codeBlock: "css"});
                    } else return UtilsMsg.createMessage({ text: `${author.username}, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!`, message, codeBlock: "css", color: "Yellow" });
                }, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞");
            //–ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            } else {
                //–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                Vote(message, queue, (win) => {
                    if (win) {
                        queue.filters.push(name);

                        play(seek);

                        return UtilsMsg.createMessage({text: `${author.username} | Filter: ${name} –≤–∫–ª—é—á–µ–Ω!`, color: "Green", message, codeBlock: "css"});
                    } else return UtilsMsg.createMessage({ text: `${author.username}, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!`, message, codeBlock: "css", color: "Yellow" });
                }, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞");
            }
        }
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    export function toStop(message: ClientMessage): void {
        const {client, guild} = message;
        const {player}: Queue = client.queue.get(guild.id);

        if (player.hasSkipped) player.stop();
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –º—É–∑—ã–∫—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param args {string} –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ü—Ä–∏–º–µ—Ä: –∫–æ–º–∞–Ω–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç1 –∞—Ä–≥—É–º–µ–Ω—Ç2
 */
function skipSong(message: ClientMessage, args: number = 1): void {
    const {client, guild, author} = message;
    const queue: Queue = client.queue.get(guild.id);
    const {player, songs, options} = queue;
    const {title, color, url}: Song = songs[args - 1];

    setImmediate(() => {
        //–ï—Å–ª–∏ –º—É–∑—ã–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑-–∑–∞ –ø–ª–µ–µ—Ä–∞
        if (!player.hasSkipped) return UtilsMsg.createMessage({ text: `${author}, ‚ö† –ú—É–∑—ã–∫–∞ –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç!`, message, color: "Yellow" });

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∂–µ—Ç –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏
        if (args > songs.length) return UtilsMsg.createMessage({ text: `${author}, –í –æ—á–µ—Ä–µ–¥–∏ ${songs.length}!`, message, color: "Yellow" });

        //–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–æ–ø—É—Å–∫
        Vote(message, queue, (win): void => {
            if (win) {
                if (args > 1) {
                    if (options.loop === "songs") for (let i = 0; i < args - 2; i++) songs.push(songs.shift());
                    else queue.songs = songs.slice(args - 2);

                    UtilsMsg.createMessage({ text: `‚è≠Ô∏è | Skip to song [${args}] | ${title}`, message, codeBlock: "css", color: "Green" });
                } else UtilsMsg.createMessage({text: `‚è≠Ô∏è | Skip song | ${title}`, message, codeBlock: "css", color: "Green"});

                return Player.toStop(message);
            } else {
                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫ —Å–¥–µ–ª–∞—Ç—å
                return UtilsMsg.createMessage({ text: `${author}, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫ [${title}](${url}) –Ω–µ –≤—ã—à–ª–æ!`, message, color: "Yellow" });
            }
        }, "–ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞", args);
    });
}
//====================== ====================== ====================== ======================
/**
 * @description –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @param queue {Queue} –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
 * @param callback {Function} –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
 * @param str {string} –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —á—Ç–æ?
 * @param arg {number} –ö–∞–∫–æ–π —Ç—Ä–µ–∫ –Ω–∞–¥–æ –±—É–¥–µ—Ç —É–±—Ä–∞—Ç—å
 * @constructor
 */
function Vote(message: ClientMessage, queue: Queue, callback: (win: boolean) => void, str: string = "–ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞", arg?: number ): void {
    const { member, author, guild} = message;

    setImmediate(() => {
        const voiceConnection: VoiceState[] = Voice.Members(guild) as VoiceState[];
        const song = queue && arg ? queue?.songs[arg - 1] : null;

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–¥–∏—Ç –æ–¥–∏–Ω –∏–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª —ç—Ç–æ—Ç —Ç—Ä–µ–∫, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        if (voiceConnection.length === 1 || member.permissions.has("Administrator") || song.requester.id === message.author.id) return callback(true);
        if (!queue || !queue?.song) return UtilsMsg.createMessage({ text: `${author.username}, –º—É–∑—ã–∫–∞ —É–∂–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç!`, message, codeBlock: "css", color: "Yellow" });

        //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞, –ø—Ä–æ—Ç–∏–≤
        let Yes: number = 0, No: number = 0;
        const choice = `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ ${str}! | ${member.user.username}\n${song ? `–¢—Ä–µ–∫: ${song.title} | ${song.duration.full}` : ""}\n\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç—Å—è –≤—Å–µ–≥–æ 5 —Å–µ–∫—É–Ω–¥!`;

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message.channel.send({content: `\`\`\`css\n${choice}\n\`\`\``}).then(msg => {
            UtilsMsg.createReaction(msg, Voting[0],
                (reaction, user) => reaction.emoji.name === Voting[0] && user.id !== message.client.user.id,
                (reaction) => Yes = reaction.count - 1, 5e3
            );
            UtilsMsg.createReaction(msg, Voting[1],
                (reaction, user) => reaction.emoji.name === Voting[1] && user.id !== message.client.user.id,
                (reaction) => No = reaction.count - 1, 5e3
            );

            //–ß—Ç–æ –¥–µ–ª–∞–µ–º –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (5 —Å–µ–∫)
            setTimeout(() => callback(Yes >= No), 5e3);
        });
    });
}