import {ClientMessage} from "../../Handler/Events/Activity/Message";
import {StageChannel, VoiceChannel} from "discord.js";
import {
    InputPlaylist,
    InputTrack,
    SearchPlatforms,
    SupportPlatforms,
    SupportType,
    TypePlatform
} from "../Structures/Queue/Song";
import {GlobalUtils} from "../../Core/Utils/LiteUtils";
import {DurationUtils} from "../Manager/DurationUtils";

//–î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
interface Options {
    type?: SupportType
    platform?: SupportPlatforms
    search: string
    message: ClientMessage
    voiceChannel: VoiceChannel | StageChannel
}

const UrlSrt = /^(https?:\/\/)/gi;
const emoji = "‚ùå";

export namespace Handle {
    /**
     * @description –ò—â–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –ø–ª–µ–µ—Ä –¥–∞–Ω–Ω—ã–µ
     * @param options {Options} –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    export function toPlayer(options: Options) {
        const {search, message, voiceChannel} = options;
        const type = toPlayerUtils.typeSong(search); //–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        const platform = toPlayerUtils.PlatformSong(search, message); //–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞
        if (platform !== "DISCORD") message.client.sendMessage({ text: `–ü–æ–∏—Å–∫ üîç | ${search}`, message, color: "Yellow", type: "css" });

        const findPlatform = SupportPlatforms[platform] ?? SupportPlatforms["YOUTUBE"]; //–ò—â–µ–º –≤ —Å–ø–∏—Å–∫–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        const findType = (findPlatform as any)[type]; //–ò—â–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞

        if (!findPlatform) return message.client.sendMessage({text: `${message.author}, —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!`, color: "DarkRed", message});
        else if (!findType) return message.client.sendMessage({text: `${message.author}, —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞!`, color: "DarkRed", message});

        const newSearch = type === "search" && search?.includes(platform) ? search.split(platform)[1] : search;
        const runCallback = findType(newSearch) as Promise<InputTrack | InputPlaylist | InputTrack[]>;

        runCallback.then((data: InputTrack | InputPlaylist | InputTrack[]) => {
            if (!data) return message.client.sendMessage({text: `${message.author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã!`, color: "Yellow", message});

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—Ä–µ–∫
            if (data instanceof Array) return SearchSongMessage.toSend(data, data.length, {...options, platform, type});

            //–°–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ç—Ä–µ–∫ –±—ã–ª –Ω–∞–π–¥–µ–Ω
            if (type !== "playlist") message.client.sendMessage({ text: `–ù–∞–π–¥–µ–Ω üîç | ${type} | ${data.title}`, message, color: "Yellow", type: "css" });

            //–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –≤ GuildQueue
            return message.client.player.emit("play", message, voiceChannel, data);
        });
        //–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
        runCallback.catch((err) => message.client.sendMessage({text: `${message.author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã!\nError: ${err}`, color: "DarkRed", message}));
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Searcher<toPlayer>
 */
namespace toPlayerUtils {
    /**
     * @description –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏
     * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    export function typeSong(search: string) {
        if (!search) return "track"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

        if (search.match(/playlist/)) return "playlist";
        else if (search.match(/album/) || search.match(/sets/)) return "album";
        else if (search.match(UrlSrt)) return "track";
        return "search";
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     */
    export function PlatformSong(search: string, message: ClientMessage): SupportPlatforms {
        if (!search) return "DISCORD"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

        if (search.match(UrlSrt)) return TypePlatform(search);
        const SplitSearch = search.split(' ');
        const platform = SplitSearch[0] as "yt" | "vk" | "sp" | "sc";

        if (platform.length === 2 && SearchPlatforms[platform]) return SearchPlatforms[platform] as SupportPlatforms;
        return platform.toUpperCase() as any;
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤
 */
namespace SearchSongMessage {
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
     * @param results {any[]} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @param num {number} –ö–æ–ª-–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
     * @param options {Options}
     * @requires {Reaction, deleteMessage}
     */
    export function toSend(results: InputTrack[], num: number, options: Options): void {
        const {message, platform} = options;

        setImmediate(() => {
            if (results.length < 1) return message.client.sendMessage({text: `${message.author} | –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!`, message, color: "DarkRed"});

            const ConstFind = `–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ ${results.length}`; //–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å —Ç—Ä–µ–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
            const Requester = `[–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform} | –ó–∞–ø—Ä–æ—Å–∏–ª: ${message.author.username}]`; //–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —Ç–æ–≥–æ –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª
            const resp = ArrayToString(results, message, platform)

            //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.channel.send(`\`\`\`css\n${ConstFind}\n${Requester}\n\n${resp}\`\`\``).then((msg: ClientMessage) => {
                //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
                const collector = GlobalUtils.createMessageCollector(message,(m) => {
                    const messageNum = parseInt(m.content);
                    return !isNaN(messageNum) && messageNum <= num && messageNum > 0 && m.author.id === message.author.id;
                });

                //–î–µ–ª–∞–µ–º —á—Ç–æ-–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏ —É–¥–∞–ª—è–ª—Å—è —Å–±–æ—Ä—â–∏–∫
                GlobalUtils.createReaction(msg, emoji, (reaction, user) => reaction.emoji.name === emoji && user.id !== message.client.user.id, () => {
                    GlobalUtils.DeleteMessage(msg, 1e3); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    collector?.stop();
                });

                //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —á–∏—Å–ª–∞
                collector.once("collect", (m: any): void => {
                    setImmediate(() => {
                        [msg, m].forEach(GlobalUtils.DeleteMessage); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        collector?.stop(); //–£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–±–æ—Ä—â–∏–∫

                        //–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∑–∞—Ç–µ–º –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
                        const url = results[parseInt(m.content) - 1].url;
                        return Handle.toPlayer({...options, type: "track", search: url})
                    });
                });

                return;
            });
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ <string>
     * @param results {any[]} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param platform {SupportPlatforms} –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫–∞–ª–∏
     * @requires {ParsingTimeToString}
     */
    function ArrayToString(results: InputTrack[], message: ClientMessage, platform: SupportPlatforms): string {
        let NumberTrack = 1, StringTracks;

        // @ts-ignore
        results.ArraySort(15).forEach((tracks: InputTrack[]) => StringTracks = tracks.map((track) => {
            const Duration = platform === "YOUTUBE" ? track.duration.seconds : DurationUtils.ParsingTimeToString(parseInt(track.duration.seconds)); //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
            const NameTrack = `[${message.client.replaceText(track.title, 80, true)}]`; //–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            const DurationTrack = `[${Duration ?? "LIVE"}]`; //–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
            const AuthorTrack = `[${message.client.replaceText(track.author.title, 12, true)}]`; //–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞

            return `${NumberTrack++} ‚ûú ${DurationTrack} | ${AuthorTrack} | ${NameTrack}`;
        }).join("\n"));

        return StringTracks;
    }
}