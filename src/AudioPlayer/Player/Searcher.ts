import {MessageCollector, MessageReaction, StageChannel, User, VoiceChannel} from "discord.js";
import {DurationUtils} from "../Manager/DurationUtils";
import {ClientMessage} from "../../Handler/Events/Activity/Message";
import {InputPlaylist, InputTrack, SupportPlatforms} from "../Structures/Queue/Song";

const youtubeStr = /^(https?:\/\/)?(www\.)?(m\.)?(music\.)?( )?(youtube\.com|youtu\.?be)\/.+$/gi;
const spotifySrt = /^(https?:\/\/)?(open\.)?(m\.)?(spotify\.com|spotify\.?ru)\/.+$/gi;
const SoundCloudSrt = /^(?:(https?):\/\/)?(?:(?:www|m)\.)?(api\.soundcloud\.com|soundcloud\.com|snd\.sc)\/(.*)$/;
const UrlSrt = /^(https?:\/\/)/gi;

export namespace Searcher {
    /**
     * @description –ò—â–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –ø–ª–µ–µ—Ä –¥–∞–Ω–Ω—ã–µ
     * @param options {Options} –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    export function toPlayer(options: Options): void {
        const {search, message, voiceChannel} = options;
        const type: TypeFindTrack = toPlayerUtils.typeSong(search);
        const platform: TypeSearch = toPlayerUtils.PlatformSong(search, message);

        //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞
        if (!message.attachments?.last()?.url) message.client.sendMessage({ text: `–ü–æ–∏—Å–∫ üîç | ${search}`, message, color: "YELLOW", type: "css" });

        const findPlatform = SupportPlatforms[platform];
        const findCallback = (findPlatform as any)[type];

        //–ï—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if (!findPlatform) return message.client.sendMessage({text: `${message.author}, —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!`, color: "RED", message});
        //–ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –Ω–æ –Ω–µ—Ç callbacks –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        else if (!findCallback) return message.client.sendMessage({text: `${message.author}, —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞!`, color: "RED", message});

        const newSearch = type === "search" && search?.match(platform) ? search.split(platform)[1] : search;
        const runPromise = findCallback(newSearch) as Promise<InputTrack | InputPlaylist | InputTrack[]>;

        runPromise.then((info: InputTrack | InputPlaylist | InputTrack[]) => {
            if (!info) return message.client.sendMessage({text: `${message.author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã!`, color: "YELLOW", message});

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—Ä–µ–∫
            if (info instanceof Array) return SearchSongMessage.toSend(info, info.length, {...options, platform, type});

            //–°–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ç—Ä–µ–∫ –±—ã–ª –Ω–∞–π–¥–µ–Ω
            if (type !== "playlist") message.client.sendMessage({ text: `–ù–∞–π–¥–µ–Ω üîç | ${type} | ${info.title}`, message, color: "YELLOW", type: "css" });

            //–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –≤ GuildQueue
            return message.client.player.emit("play", message, voiceChannel, info);
        });
        //–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
        runPromise.catch((err) => message.client.sendMessage({text: `${message.author}, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã! \nError: ${err}`, color: "RED", message}));
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Searcher<toPlayer>
 */
namespace toPlayerUtils {
    /**
     * @description –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏
     * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @private
     */
    export function typeSong(search: string) {
        if (!search) return "track"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

        if (search.match(/playlist/)) return "playlist";
        else if (search.match(/album/) || search.match(/sets/)) return "album";
        else if (search.match(UrlSrt)) return "track";
        return "search";
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @param search {string} –ß—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @private
     */
    export function PlatformSong(search: string, message: ClientMessage): TypeSearch {
        if (!search) return "Discord"; //–ï—Å–ª–∏ –Ω–µ—Ç search, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª

        if (search.match(UrlSrt)) {
            if (search.match(youtubeStr)) return "YOUTUBE";
            else if (search.match(spotifySrt)) return "SPOTIFY";
            else if (search.match(/vk.com/)) return "VK";
            else if (search.match(SoundCloudSrt)) return "SOUNDCLOUD";
            else if (search.match(/cdn.discordapp.com/) || message.attachments?.last()?.url) return "Discord";
        }

        const SplitSearch = search.split(' ');
        const FindType = SplitSearch[0].toLowerCase() as TypeSearch;

        if (FindType.length > 2) return "YOUTUBE";
        return FindType;
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤
 */
namespace SearchSongMessage {
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
     * @param results {any[]} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @param num {number} –ö–æ–ª-–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
     * @param options {Options}
     * @requires {Reaction, CreateMessageCollector, deleteMessage, Searcher}
     * @constructor
     */
    export function toSend(results: InputTrack[], num: number, options: Options): void {
        const {message, platform} = options;

        setImmediate(() => {
            if (results.length < 1) return message.client.sendMessage({text: `${message.author} | –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!`, message, color: "RED"});

            const ConstFind = `–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ ${results.length}`; //–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å —Ç—Ä–µ–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
            const Requester = `[–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform} | –ó–∞–ø—Ä–æ—Å–∏–ª: ${message.author.username}]`; //–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —Ç–æ–≥–æ –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª
            const resp = ArrayToString(results, message, platform)

            //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.channel.send(`\`\`\`css\n${ConstFind}\n${Requester}\n\n${resp}\`\`\``).then((msg: ClientMessage) => {
                //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫
                const collector = CreateMessageCollector(msg, message, num);

                //–î–µ–ª–∞–µ–º —á—Ç–æ-–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏ —É–¥–∞–ª—è–ª—Å—è —Å–±–æ—Ä—â–∏–∫
                Reaction(msg, message, "‚ùå", () => {
                    deleteMessage(msg); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    collector?.stop();
                });

                //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —á–∏—Å–ª–∞
                collector.once("collect", (m: any): void => {
                    setImmediate(() => {
                        [msg, m].forEach((m: ClientMessage) => deleteMessage(m)); //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        collector?.stop(); //–£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–±–æ—Ä—â–∏–∫

                        //–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∑–∞—Ç–µ–º –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
                        const url = results[parseInt(m.content) - 1].url;
                        return Searcher.toPlayer({...options, type: "track", search: url})
                    });
                });

                return;
            });
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
     * @param msg {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç–∞
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param emoji {string} —Å–∞–º —ç–º–æ–¥–∑–∏
     * @param callback {Function} –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏
     * @constructor
     */
    function Reaction(msg: ClientMessage, message: ClientMessage, emoji: string, callback: Function): void {
        setImmediate(() => {
            //–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            msg.react(emoji).then(() => {
                const collector = msg.createReactionCollector({
                    filter: (reaction: MessageReaction, user: User) => (reaction.emoji.name === emoji && user.id !== message.client.user.id),
                    max: 1,
                    time: 60e3 //–ß–µ—Ä–µ–∑ 1 –º–∏–Ω —Å–±–æ—Ä—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
                });
                //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–±–æ—Ä—â–∏–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é
                collector.once("collect", () => {
                    collector?.stop();
                    return callback();
                });
            });
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (discord.js) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param msg {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç–∞
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param num {number} –ö–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤
     * @constructor
     */
    function CreateMessageCollector(msg: ClientMessage, message: ClientMessage, num: number): MessageCollector {
        //–°–±–æ—Ä—â–∏–∫ —á–∏—Å–µ–ª, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        return msg.channel.createMessageCollector({
            filter: (m: any) => !isNaN(m.content) && m.content <= num && m.content > 0 && m.author.id === message.author.id,
            max: 1,
            time: 60e3 //–ß–µ—Ä–µ–∑ 1 –º–∏–Ω —Å–±–æ—Ä—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ <string>
     * @param results {any[]} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param type {TypeSearch} –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫–∞–ª–∏
     * @requires {ParsingTimeToString}
     * @constructor
     */
    function ArrayToString(results: InputTrack[], message: ClientMessage, type: TypeSearch): string {
        let NumberTrack = 1, StringTracks;

        // @ts-ignore
        results.ArraySort(15).forEach((tracks: InputTrack[]) => {
            StringTracks = tracks.map((track) => {
                const Duration = type === "YOUTUBE" ? track.duration.seconds : DurationUtils.ParsingTimeToString(parseInt(track.duration.seconds)); //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
                const NameTrack = `[${message.client.replaceText(track.title, 80, true)}]`; //–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                const DurationTrack = `[${Duration ?? "LIVE"}]`; //–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
                const AuthorTrack = `[${message.client.replaceText(track.author.title, 12, true)}]`; //–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞

                return `${NumberTrack++} ‚ûú ${DurationTrack} | ${AuthorTrack} | ${NameTrack}`;
            }).join("\n");
        });
        return StringTracks;
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param msg {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
     */
    function deleteMessage(msg: ClientMessage): void {
        setTimeout(() => msg.delete().catch(() => null), 1e3);
    }
}

//–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
type TypeFindTrack = "track" | "playlist" | "search" | "album";
//–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
type TypeSearch = "YOUTUBE" | "SPOTIFY" | "VK" | "SOUNDCLOUD" | "Discord";
//–î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
interface Options {
    type?: TypeFindTrack
    platform?: TypeSearch
    search: string
    message: ClientMessage
    voiceChannel: VoiceChannel | StageChannel
}