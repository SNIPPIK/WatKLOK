import {Queue} from "../Structures/Queue/Queue";
import {InputPlaylist, Song} from "../Structures/Queue/Song";
import {EmbedMessages} from "../Structures/EmbedMessages";
import {ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType} from "discord.js";
import {ClientMessage} from "../../Handler/Events/Activity/Message";
import {CollectionMap, GlobalUtils} from "../../Core/Utils/LiteUtils";

//–ö–Ω–æ–ø–∫–∏ –Ω–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞
const Buttons = new ActionRowBuilder().addComponents([
    new ButtonBuilder().setCustomId("last")        .setEmoji({id: "986009800867479572"}).setStyle(ButtonStyle.Secondary), //id: "986009800867479572" –∏–ª–∏ name: "‚è™"
    new ButtonBuilder().setCustomId("resume_pause").setEmoji({id: "986009725432893590"}).setStyle(ButtonStyle.Secondary), //id: "986009725432893590" –∏–ª–∏ name: "‚èØ"
    new ButtonBuilder().setCustomId("skip")        .setEmoji({id: "986009774015520808"}).setStyle(ButtonStyle.Secondary), //id: "986009774015520808" –∏–ª–∏ name: "‚è©"
    new ButtonBuilder().setCustomId("replay")      .setEmoji({id: "986009690716667964"}).setStyle(ButtonStyle.Secondary)] //id: "986009690716667964" –∏–ª–∏ name: "üîÉ"
);
//–ö–Ω–æ–ø–∫–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
const ButtonID = new Set(["skip", "resume_pause", "replay", "last"]);

//–ë–∞–∑–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
const MessagesData = {
    messages: new CollectionMap<string, ClientMessage>(),
    timer: null as NodeJS.Timeout
}

/**
 * –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–µ–µ—Ä
 */
export namespace MessagePlayer {
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 15 —Å–µ–∫
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @requires {MessageUpdater, pushCurrentSongMessage, Message}
     * @constructor
     */
    export function toPlay(message: ClientMessage) {
        if (MessagesData.messages.get(message.channelId)) MessageUpdater.toRemove(message);

        pushCurrentSongMessage(message).then(MessageUpdater.toPush).catch(() => undefined);
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–ª–µ–µ—Ä –≤—ã–≤–æ–¥–∏—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param song {Song} –¢—Ä–µ–∫
     * @param err {Error | string} –û—à–∏–±–∫–∞
     * @requires {DeleteMessage}
     * @constructor
     */
    export function toError(queue: Queue, song: Song, err: Error | string = null) {
        const {client, channel} = queue.channels.message;

        setImmediate(() => {
            try {
                const Embed = EmbedMessages.toError(client, song, queue, err);
                const WarningChannelSend = channel.send({embeds: [Embed]});

                WarningChannelSend.then(GlobalUtils.DeleteMessage);
            } catch (e) {
                client.console(`[MessagePlayer]: [Method: ${e.method ?? null}]: [on: push, ${e.code}]: ${e?.message}`);
            }
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –ü—Ä–∏ –¥–æ–ª–≥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ –ø–ª–µ–µ—Ä –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param song {Song} –¢—Ä–µ–∫
     * @requires {DeleteMessage}
     * @constructor
     */
    export function toBuffering(queue: Queue, song: Song) {
        const {client, channel} = queue.channels.message;

        setImmediate(() => {
            try {
                const Embed = EmbedMessages.toBuffering(client, song, queue);
                const BufferingChannelSend = channel.send({embeds: [Embed]});

                BufferingChannelSend.then(GlobalUtils.DeleteMessage);
            } catch (e) {
                client.console(`[MessagePlayer]: [Method: ${e.method ?? null}]: [on: push, ${e.code}]: ${e?.message}`);
            }
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
     * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
     * @param song {Song} –¢—Ä–µ–∫
     * @requires {DeleteMessage}
     * @constructor
     */
    export function toPushSong(queue: Queue, song: Song) {
        const {client, channel} = queue.channels.message;

        setImmediate(() => {
            try {
                const EmbedPushedSong = EmbedMessages.toPushSong(client, song, queue);
                const PushChannel = channel.send({embeds: [EmbedPushedSong]});

                PushChannel.then(GlobalUtils.DeleteMessage);
            } catch (e) {
                client.console(`[MessagePlayer]: [Method: ${e.method ?? null}]: [on: push, ${e.code}]: ${e?.message}`);
            }
        });
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param playlist {InputPlaylist} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
     * @requires {DeleteMessage}
     */
    export function toPushPlaylist(message: ClientMessage, playlist: InputPlaylist) {
        const {channel, client} = message;

        setImmediate(() => {
            try {
                const EmbedPushPlaylist = EmbedMessages.toPushPlaylist(message, playlist);
                const PushChannel = channel.send({embeds: [EmbedPushPlaylist]});

                PushChannel.then(GlobalUtils.DeleteMessage);
            } catch (e) {
                client.console(`[MessagePlayer]: [Method: ${e.method ?? null}]: [on: push, ${e.code}]: ${e?.message}`);
            }
        });
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @requires {MessageUpdater}
 * @constructor
 */
function UpdateMessage(message: ClientMessage): void {
    const queue: Queue = message.client.queue.get(message.guild.id);

    if (!queue || queue?.songs?.length === 0) return MessageUpdater.toRemove(message);

    setImmediate(() => {
        const CurrentPlayEmbed = EmbedMessages.toPlay(message.client, queue?.songs[0], queue);

        try {
            return message.edit({embeds: [CurrentPlayEmbed]});
        } catch (e) {
            message.client.console(`[MessageEmitter]: [Method: ${e.method ?? null}]: [on: update, ${e.code}]: ${e?.message}`);
        }
    });
}
//====================== ====================== ====================== ======================
/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @requires {CreateCollector, Buttons}
 * @constructor
 */
function pushCurrentSongMessage(message: ClientMessage): Promise<ClientMessage> {
    const queue: Queue = message.client.queue.get(message.guild.id);
    const CurrentPlayEmbed = EmbedMessages.toPlay(message.client, queue?.songs[0], queue); // @ts-ignore
    const sendMessage = message.channel.send({embeds: [CurrentPlayEmbed], components: [Buttons]});

    sendMessage.then((msg) => CreateCollector(msg, queue));
    sendMessage.catch((e) => console.log(`[MessageEmitter]: [Method: ${e.method ?? null}]: [on: playSong, ${e.code}]: ${e?.message}`));

    return sendMessage;
}
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –∫–Ω–æ–ø–æ–∫
 * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
 * @param queue {Queue} –û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
 * @constructor
 */
function CreateCollector(message: ClientMessage, queue: Queue) {
    //–°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –∫–Ω–æ–ø–æ–∫
    const collector = message.createMessageComponentCollector({
        filter: (i) => ButtonID.has(i.customId), //–§–∏–ª—å—Ç—Ä—É–µ–º
        componentType: ComponentType.Button, //–ö–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å
    });

    //–î–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∏–≤–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫
    collector.on("collect", (i) => {
        switch (i.customId) {
            case "resume_pause": { //–ï—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                switch (queue?.player.state.status) {
                    case "playing": return queue?.player.pause();
                    case "paused": return queue?.player.resume();
                }
                return;
            }
            //–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–∏
            case "skip": return queue?.player.stop();
            //–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
            case "replay": return queue?.player.play(queue);
            //–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ—é –∏–∑ —Å–ø–∏—Å–∫–∞ –º—É–∑—ã–∫—É
            case "last": return queue?.swapSongs();
        }
    });

    return collector;
}
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
//====================== ====================== ====================== ======================
/**
 * –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
 */
namespace MessageUpdater {
    /**
     * @description –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ <Message[]>
     * @param message {message} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @requires {StepCycleMessage}
     */
    export function toPush(message: ClientMessage) {
        if (MessagesData.messages.get(message.channelId)) return;
        MessagesData.messages.set(message.channelId, message);

        if (MessagesData.messages.size === 1) setImmediate(StepCycleMessage);
    }
    //====================== ====================== ====================== ======================
    /**
     * @description –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ <Message[]>, —Ç–∞–∫-–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–∏ —Ç–∞–π–º–µ—Ä
     * @param message {ClientMessage} –°–æ–æ–±—â–µ–Ω–∏–µ
     * @requires {Message}
     */
    export function toRemove(message: ClientMessage) {
        const Find = MessagesData.messages.get(message.channelId);
        if (!Find) return;

        if (Find.deletable) Find.delete().catch(() => undefined);
        MessagesData.messages.delete(message.channelId);

        if (MessagesData.messages.size === 0) {
            if (typeof MessagesData.timer !== "undefined") clearTimeout(MessagesData.timer);
        }
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª–∞—Ö
 * @requires {UpdateMessage, Message}
 * @constructor
 */
function StepCycleMessage() {
    try {
        setImmediate(() => MessagesData.messages.forEach(UpdateMessage));
    } finally {
        MessagesData.timer = setTimeout(StepCycleMessage, 12e3);
    }
}