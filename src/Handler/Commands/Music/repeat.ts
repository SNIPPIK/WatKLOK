import {ApplicationCommandOptionType} from "discord.js";
import {Command} from "@handler";
import {db} from "@Client/db";

export default class extends Command {
    public constructor() {
        super({
            name: "repeat",
            description: "–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –º—É–∑—ã–∫–∏!",

            usage: "song | –î–æ—Å—Ç—É–ø–Ω—ã: song, songs, off",
            options: [
                {
                    name: "type",
                    description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑...",
                    type: ApplicationCommandOptionType["String"],
                    choices: [
                        {
                            name: "song | –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞",
                            value: "song"
                        },
                        {
                            name: "songs | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤",
                            value: "songs"
                        },
                        {
                            name: "off | –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞",
                            value: "off"
                        }
                    ]
                }
            ],

            execute: (message, args) => {
                const { author, member, guild } = message;
                const queue = db.music.queue.get(guild.id);

                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
                if (!member?.voice?.channel || !member?.voice) return { content: `${author}, –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`, color: "Yellow" };

                //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
                else if (queue && queue.voice && member?.voice?.channel?.id !== queue.voice.id && guild.members.me.voice.channel) return {
                    content: `${author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`, color: "Yellow"
                };

                //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
                else if (!queue) return { content: `${author}, ‚ö† | –ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`, color: "Yellow" };

                const argument = args?.pop()?.toLowerCase();

                switch (argument) {
                    case "song": {
                        queue.options.loop = "song";
                        return { content: `üîÇ | –ü–æ–≤—Ç–æ—Ä  | ${queue.songs[0].title}`, codeBlock: "css"};
                    }
                    case "songs": {
                        queue.options.loop = "songs";
                        return { content: `üîÅ | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –º—É–∑—ã–∫–∏`, codeBlock: "css"};
                    }
                    case "off": {
                        queue.options.loop = "off";
                        return { content: `‚ùå | –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω`, codeBlock: "css"};
                    }
                }
            }
        });
    };
}