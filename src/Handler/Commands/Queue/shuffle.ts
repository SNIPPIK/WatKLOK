import { ApplicationCommandOptionType } from "discord.js";
import {Song} from "@components/AudioClient/Queue/Song";
import {Command} from "@handler";

import {db} from "@components/QuickDB";

export default class extends Command {
    public constructor() {
        super({
            name: "shuffle",
            description: "–ü–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ –º—É–∑—ã–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!",

            options: [{
                name: "value",
                description: "Shuffle queue songs",
                required: true,
                type: ApplicationCommandOptionType["String"]
            }],

            execute: (message) => {
                const { author, member, guild } = message;
                const queue = db.music.queue.get(guild.id);

                //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
                if (!queue) return { content: `${author}, ‚ö† | –ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`, color: "Yellow" };

                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
                else if (!member?.voice?.channel || !member?.voice) return { content: `${author}, –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`, color: "Yellow" };

                //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
                else if (queue && queue.voice && member?.voice?.channel?.id !== queue.voice.id && guild.members.me.voice.channel) return {
                    content: `${author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`,
                    color: "Yellow"
                };

                //–ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
                else if (!queue.songs) return { content: `${author}, –ù–µ—Ç –º—É–∑—ã–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!`, color: "Yellow" };

                //–ï—Å–ª–∏ —Ç—Ä–µ–∫–æ–≤ –º–µ–Ω—å—à–µ 3
                else if (queue.songs.length < 3) return { content: `${author}, –û—á–µ–Ω—å –º–∞–ª–æ –º—É–∑—ã–∫–∏, –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ 3`, color: "Yellow" };

                this.shuffleSongs(queue.songs);
                return { content: `üîÄ | Shuffle total [${queue.songs.length}]`, codeBlock: "css" };
            }
        });
    };

    private shuffleSongs = (songs: Song[]): void => {
        for (let i = songs.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [songs[i], songs[j]] = [songs[j], songs[i]];
        }
    };
}