import {ApplicationCommandOptionType} from "discord.js";
import {Command, Constructor} from "@handler";
import {Client} from "@Client";
import {db} from "@Client/db";

/**
 * @class Command_Play
 * @command play
 * @description –í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
 *
 * @param platform - –¢–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * @param request - –°—Å—ã–ª–∫–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 */
class Command_Play extends Constructor.Assign<Command> {
    public constructor() {
        super({
            name: "play",
            description: "–í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é!",

            permissions: ["Speak", "Connect"],
            options: [
                {
                    name: "platform",
                    description: "–ö –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å?",
                    type: ApplicationCommandOptionType["String"],
                    choices: (db.platforms.supported.length < 25 ? db.platforms.supported : db.platforms.supported.splice(0, 20)).map((platform) => {
                        return {
                            name: `[${platform.requests.length}] ${platform.name} | ${platform.url}`,
                            value: platform.name
                        }
                    }),
                    required: true
                },
                {
                    name: "request",
                    description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!",
                    required: true,
                    type: ApplicationCommandOptionType["String"]
                }
            ],

            execute: (message: Client.message, args) => {
                const {author, member, guild} = message;
                const queue = db.queue.get(guild.id);
                const VoiceChannel = member?.voice?.channel;

                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
                if (!VoiceChannel) return {
                    content: `${author}, –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`,
                    color: "Yellow"
                };

                //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
                else if (queue && queue.voice && VoiceChannel?.id !== queue.voice.id && guild.members.me.voice.channel) return {
                    content: `${author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`,
                    color: "Yellow"
                };

                db.queue.events.emit("collection/api", message, VoiceChannel, args);
            }
        });
    };
}

/**
 * @class Command_PlayFile
 * @command play-file
 * @description –í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞
 *
 * @param file - –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
 */
class Command_PlayFile extends Constructor.Assign<Command> {
    public constructor() {
        super({
            name: "play-file",
            description: "–í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞!",

            permissions: ["Speak", "Connect"],
            options: [
                {
                    name: "file",
                    description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª!",
                    type: ApplicationCommandOptionType["Attachment"],
                    required: true
                }
            ],

            execute: (message: Client.interact) => {
                const { author, member, guild } = message;
                const queue = db.queue.get(guild.id);
                const VoiceChannel = member?.voice?.channel;
                const attachment = message.options.getAttachment("file");

                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Å—É–Ω—É–ª —Ñ–∞–ª—å—à–∏–≤–∫—É
                if (!attachment.contentType.match("audio")) return {
                    content: `${author}, –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏!`,
                    color: "Yellow"
                };

                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
                else if (!VoiceChannel) return {
                    content: `${author}, –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`,
                    color: "Yellow"
                };

                //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
                else if (queue && queue.voice && VoiceChannel?.id !== queue.voice.id && guild.members.me.voice.channel) return {
                    content: `${author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`,
                    color: "Yellow"
                };

                db.queue.events.emit("collection/api", message as any, VoiceChannel, ["DISCORD", attachment.url]);
            }
        });
    };
}

/**
 * @class Command_Replay
 * @command replay
 * @description –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
 */
class Command_Replay extends Constructor.Assign<Command> {
    public constructor() {
        super({
            name: "replay",
            description: "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫?",
            execute: (message) => {
                const { author, member, guild } = message;
                const queue = db.queue.get(guild.id);

                //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
                if (!member?.voice?.channel || !member?.voice) return { content: `${author}, –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`, color: "Yellow" };

                //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
                else if (queue && queue.voice && member?.voice?.channel?.id !== queue.voice.id && guild.members.me.voice.channel) return {
                    content: `${author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`,
                    color: "Yellow"
                };

                //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
                else if (!queue) return { content: `${author}, ‚ö† | –ú—É–∑—ã–∫–∞ —â–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`, color: "Yellow" };
                let { title } = queue.songs.song;

                queue.player.play(queue.songs.song);
                //–°–æ–æ–±—â–∞–µ–º –æ —Ç–æ–º —á—Ç–æ –º—É–∑—ã–∫–∞ –Ω–∞—á–∞—Ç–∞ —Å –Ω–∞—á–∞–ª–∞
                return { content: `üîÇ | Replay | ${title}`, color: "Green", codeBlock: "css" };
            }
        });
    };
}

export default Object.values({Command_Play, Command_PlayFile, Command_Replay});