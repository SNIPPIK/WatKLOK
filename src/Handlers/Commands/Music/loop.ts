import {ApplicationCommandOptionType} from "discord.js";
import { Queue } from "@AudioPlayer/Queue/Queue";
import { ClientMessage } from "@Client/Message";
import { Command, ResolveData } from "@Command";


export default class extends Command {
    public constructor() {
        super({
            name: "repeat",
            aliases: ["loop", "rept"],
            description: "–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ –º—É–∑—ã–∫–∏!",

            usage: "song | –î–æ—Å—Ç—É–ø–Ω—ã: song, songs, off",
            options: [
                {
                    name: "type",
                    description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑...",
                    type: ApplicationCommandOptionType.String,
                    choices: [
                        {
                            name: "song | –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞",
                            value: "song"
                        },
                        {
                            name: "songs | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤",
                            value: "songs"
                        },
                        {
                            name: "off | –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞",
                            value: "off"
                        }
                    ]
                }
            ]
        });
    };

    public readonly execute = (message: ClientMessage, args: string[]): ResolveData => {
        const { author, member, guild, client } = message;
        const queue: Queue = client.queue.get(guild.id);

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
        if (!member?.voice?.channel || !member?.voice) return { text: `${author}, –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`, color: "Yellow" };

        //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if (queue && queue.voice && member?.voice?.channel?.id !== queue.voice.id && guild.members.me.voice.channel) return {
            text: `${author}, –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`, color: "Yellow"
        };

        //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
        if (!queue) return { text: `${author}, ‚ö† | –ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç.`, color: "Yellow" };

        //–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–∞–¥–∏–æ
        if (queue.options.radioMode) return { text: `${author}, –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–¥–∏–æ!`, color: "Yellow" };

        const argument = args?.pop()?.toLowerCase();
        let text = "";

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä
        if (["off", "–≤—ã–∫–ª"].includes(argument)) {
            queue.options.loop = "off";
            text = `‚ùå | –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω`;

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä    
        } else if (["on", "–≤–∫–ª"].includes(argument)) {
            queue.options.loop = "songs";
            text = `üîÅ | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –º—É–∑—ã–∫–∏`;

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞    
        } else if (["one", "1", "song"].includes(argument)) {
            queue.options.loop = "song";
            text = `üîÇ | –ü–æ–≤—Ç–æ—Ä  | ${queue.songs[0].title}`;

            //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç
        } else if (!argument) {
            queue.options.loop = queue.options.loop !== "songs" ? "songs" : "off";
            text = `üé∂ | –ü–æ–≤—Ç–æ—Ä ${queue.options.loop}`;
        }

        return { text, codeBlock: "css" };
    };
}