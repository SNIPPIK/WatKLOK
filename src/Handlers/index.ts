import { ActionRowBuilder, ApplicationCommandOption, ClientEvents, Colors, CommandInteraction, EmbedData, PermissionResolvable } from "discord.js";
import {ClientInteraction, ClientMessage} from "@handler/Events/Atlas/interactionCreate";
import {AudioPlayerEvents} from "@watklok/player/AudioPlayer";
import {ArrayQueue} from "@watklok/player/queue/Queue";
import {CollectionAudioEvents, db} from "@Client/db";
import {Song} from "@watklok/player/queue/Song";
import {Atlas, Logger} from "@Client";
import {readdirSync} from "node:fs";

/**
 * @author SNIPPIK
 * @description –ú—É–ª—å—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
 * @abstract
 */
export abstract class Collection<K> {
    private readonly array =  new Map<string, K>();
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ ID
     * @param ID - ID –æ–±—ä–µ–∫—Ç–∞
     * @public
     */
    public get = (ID: string) => {
        return this.array.get(ID);
    };

    /**
     * @description –ß—Ç–æ —Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ filter
     * @param fn - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @public
     */
    public filter = (fn: (item: K) => boolean) => {
        const items: K[] = [];

        for (let [name, item] of this.array) {
            if (fn(item)) items.push(item);
        }

        return items;
    };

    /**
     * @description –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫
     * @param ID - ID –æ–±—ä–µ–∫—Ç–∞
     * @param value - –û–±—ä–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     * @param promise - –ï—Å–ª–∏ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–æ–º
     * @public
     */
    public set = (ID: string, value: K, promise?: (item: K) => void) => {
        const item = this.get(ID);

        if (!item) {
            if (promise) promise(value);
            this.array.set(ID, value);
            return value;
        }

        return item;
    };

    /**
     * @description –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
     * @param ID - ID –°–µ—Ä–≤–µ—Ä–∞
     * @public
     */
    public remove = (ID: string) => {
        const item: any = this.array.get(ID);

        if (item) {
            if ("cleanup" in item) item?.cleanup();
            if ("destroy" in item) item?.destroy();
            if ("disconnect" in item) item?.disconnect();

            this.array.delete(ID);
        }
    };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
     * @public
     */
    public get size() {
        return this.array.size;
    };
}

/**
 * @author SNIPPIK
 * @description –ú—É–ª—å—Ç–∏-–∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–ª–∞—Å—Å–æ–≤
 * @class Assign
 * @abstract
 */
export abstract class Assign<T> {
    /**
     * @description –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
     * @param options {Command}
     * @protected
     */
    protected constructor(options: T) {
        Object.assign(this, options);
    };
}

/**
 * @author SNIPPIK
 * @description –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * @class RequestAPI
 * @abstract
 */
export abstract class RequestAPI {
    public readonly name: API.platform;
    public readonly url: string;
    public readonly audio: boolean;
    public readonly auth: boolean;
    public readonly filter: RegExp;
    public readonly color: number;
    public readonly requests: RequestAPI_item<API.callbacks>[];

    /**
     * @description –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * @param options
     */
    protected constructor(options: RequestAPI) {
        Object.assign(this, options);
    };
}

/**
 * @author SNIPPIK
 * @description –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 * @class RequestAPI_item
 * @abstract
 */
export abstract class RequestAPI_item<T extends API.callbacks> {
    public readonly callback?: (url: string) => API.callback<T>;
    public readonly filter?: RegExp;
    public readonly name: T;

    /**
     * @description –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * @param options
     */
    protected constructor(options: RequestAPI_item<T>) {
        Object.assign(this, options);
    };
}


/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Handlers
 * @class loadHandlerDir
 * @private
 */
export class loadHandlerDir<T> {
    private readonly path: string;
    private readonly callback: (data: T | {error: true, message: string}, file: string) => void;

    public constructor(path: string, callback: (data: T | {error: true, message: string}, file: string) => void) {
        this.path = `src/${path}`; this.callback = callback;

        readdirSync(this.path).forEach((dir) => {
            if (dir.endsWith(".js")) return;
            return this.readDir(dir);
        });
    };

    /**
     * @description –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     * @param dir {string} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —á–∏—Ç–∞—Ç—å
     * @return void
     * @private
     */
    private readonly readDir = (dir?: string) => {
        const path = dir ? `${this.path}/${dir}` : this.path;

        readdirSync(path).forEach((file) => {
            if (!file.endsWith(".js")) return;
            const pathFile = `../../${path}/${file}`;

            try {
                const importFile = require(pathFile);
                const keysFile = Object.keys(importFile);

                if (keysFile.length <= 0) this.callback({ error: true, message: "TypeError: Not found imports data!"}, `${path}/${file}`);
                else this.callback(new importFile[keysFile[0]], `${path}/${file}`);
            } catch (e) {
                this.callback({ error: true, message: e}, `${path}/${file}`);
            }

            //–£–¥–∞–ª—è–µ–º –∫–µ—à –∑–∞–≥—Ä—É–∑–∫–∏
            delete require.cache[require.resolve(pathFile)];
        });
    };
}

/**
 * @author SNIPPIK
 * @description –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Discord
 * @class ActionMessage
 */
export class ActionMessage {
    private readonly _options: IActionMessage & { message: ClientMessage | ClientInteraction } = null;
    /**
     * @description –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param options {object} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public constructor(options: ActionMessage["_options"]) {
        if ("content" in options && !("page" in options)) {
            options = {
                ...options, embeds: [{
                    color: typeof options.color === "number" ? options.color : Colors[options.color] ?? 258044,
                    description: options.codeBlock ? `\`\`\`${options.codeBlock}\n${options.content}\n\`\`\`` : options.content
                }]
            }
            delete options["content"];
        }

        this._options = options;

        this.channel.then((message) => {
            const {time, promise} = this._options;

            if (!message) return;
            //–ï—Å–ª–∏ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ
            if (promise) promise(message);

            //–ï—Å–ª–∏ –º–µ–Ω—é, —Ç–æ –Ω–µ –Ω–∞–¥–æ —É–¥–∞–ª—è—Ç—å
            if ("page" in options) this._createMenu(message);
            else if (time !== 0) ActionMessage.delete = {message, time};
        }).catch((err) => Logger.log("ERROR", err));
    };

    /**
     * @description –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
     * @param message {ClientMessage}
     * @return void
     */
    private _createMenu = (message: ClientMessage) => {
        let {page, pages, callback} = this._options as any;

        for (const [key, emoji] of Object.entries({back: "‚¨ÖÔ∏è", cancel: "üóë", next: "‚û°Ô∏è"})) {
            message.react(emoji).then(() => message.createReactionCollector({
                filter: (reaction, user) => reaction.emoji.name === emoji && user.id !== message.client.user.id,
                time: 60e3
            }).on("collect", ({users}): void => {
                users.remove(this._options.message.author).catch(() => null);

                //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (key === "cancel") ActionMessage.delete = {message, time: 2e3};

                //–ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                else if (page === pages.length || page < 1) return;

                //–í—ã–±–∏—Ä–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å—Ç—Ä–∞–Ω–∏—á–∫–æ–π, –ø—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥
                else if (key === "next") page++;
                else page--;

                //–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                return callback(message, pages, page);
            }))
        }
    };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return Promise<ClientMessage>
     */
    protected get channel(): Promise<ClientMessage> {
        const {message, replied} = this._options;

        if ("replied" in message && !(message as any).replied && !replied) {
            if (message.isRepliable()) return message.reply(this.messageOptions);
            return message.followUp(this.messageOptions);
        }

        return message.channel.send(this.messageOptions) as Promise<ClientMessage>;
    };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return object
     */
    protected get messageOptions() {
        return { // @ts-ignore
            content: this._options.content, embeds: this._options?.embeds,
            fetchReply: true, components: this._options.components as any
        };
    };

    /**
     * @description –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
     * @param options
     */
    public static set delete(options: { message: CommandInteraction | ClientMessage, time?: number }) {
        const {message, time} = options;

        //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if ("deletable" in message && message.deletable) {
            setTimeout(() => message.delete().catch(() => {
            }), time ?? 15e3);

            //–£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        } else if ("replied" in message && !(message as any).replied) {
            setTimeout(() => (message as CommandInteraction)?.deleteReply().catch(() => {
            }), time ?? 15e3);
        }
    };
}

/**
 * @author SNIPPIK
 * @description –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã APIs
 * @class ResponseAPI
 */
export class ResponseAPI {
    private readonly _api: RequestAPI;
    /**
     * @description –í—ã–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
     * @return API.platform
     * @public
     */
    public get platform() { return this._api.name; };

    /**
     * @description –í—ã–¥–∞–µ–º RegExp
     * @return RegExp
     * @public
     */
    public get filter() { return this._api.filter; };


    /**
     * @description –í—ã–¥–∞–µ–º bool, –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
     * @return boolean
     * @public
     */
    public get block() { return db.platforms.block.includes(this.platform); };

    /**
     * @description –í—ã–¥–∞–µ–º bool, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     * @return boolean
     * @public
     */
    public get auth() { return db.platforms.authorization.includes(this.platform); };

    /**
     * @description –í—ã–¥–∞–µ–º bool, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –∞—É–¥–∏–æ
     * @return boolean
     * @public
     */
    public get audio() { return db.platforms.audio.includes(this.platform); };

    /**
     * @description –í—ã–¥–∞–µ–º int, —Ü–≤–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @return number
     * @public
     */
    public get color() { return this._api.color; };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∑–∞–ø—Ä–æ—Å–∞
     * @param type {find} –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
     * @public
     */
    public find<T extends API.callbacks>(type: string | T): RequestAPI_item<T> {
        try {
            const callback = this._api.requests.find((item) => item.name === type || item.filter && type.match(item.filter));

            if (!callback) {
                if (!type.startsWith("http")) {
                    const requests = this._api.requests.find((item) => item.name === "search");

                    //@ts-ignore
                    if (requests) return requests;
                }

                return null;
            }

            //@ts-ignore
            return callback;
        } catch {
            return undefined;
        }
    };

    /**
     * @description –ò—â–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
     * @param argument {API.platform} –ò–º—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @public
     */
    public constructor(argument: API.platform | string) {
        const temp = db.platforms.supported;

        //–ï—Å–ª–∏ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞
        if (argument.startsWith("http")) {
            const platform = temp.find((info) => !!argument.match(info.filter));

            //–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º DISCORD
            if (!platform) { this._api = temp.find((info) => info.name === "DISCORD"); return; }
            this._api = platform; return;
        }

        //–ï—Å–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç
        try {
            const platform = temp.find((info) => info.name === argument);

            //–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º YOUTUBE
            if (!platform) { this._api = temp.find((info) => info.name === "YOUTUBE"); return; }

            this._api = platform;
        } catch { //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–Ω–∞—á–∏—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º YOUTUBE
            this._api = temp.find((info) => info.name === "YOUTUBE");
        }
    };
}


/**
 * @author SNIPPIK
 * @description –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
 * @namespace API
 */
export namespace API {
    /**
     * @description –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @type
     */
    export type platform = "YOUTUBE" | "SPOTIFY" | "VK" | "DISCORD" | "YANDEX";

    /**
     * @description –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
     * @type
     */
    export type callbacks = "track" | "playlist" | "search" | "album" | "artist";

    /**
     * @description –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
     * @type
     */
    export type callback<T> = Promise<(T extends "track" ? Song : T extends "playlist" | "album" ? Song.playlist : T extends "search" | "artist" ? Song[] : never) | Error>
}

/**
 * @author SNIPPIK
 * @description –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
type IActionMessage = {
    //–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
    components?: ActionRowBuilder[];

    //–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    promise?: (msg: ClientMessage) => void;

    //–í—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    time?: number;

    //–ù–∞–¥–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    replied?: boolean;
} & ({ content: string; codeBlock?: string; color?: "DarkRed" | "Blue" | "Green" | "Default" | "Yellow" | "Grey" | "Navy" | "Gold" | "Orange" | "Purple" | number;
} | { content?: string; embeds?: EmbedData[]; callback: (message: ClientMessage, pages: string[], page: number) => void; page: number; pages: string[];
} | { embeds: EmbedData[]; });

/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–∞–Ω–¥
 * @interface Command
 */
export interface Command {
    /**
     * @description –ò–º—è –∫–æ–º–∞–Ω–¥—ã
     * @default null
     * @readonly
     * @public
     */
    name: string;

    /**
     * @description –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     * @default "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
     * @readonly
     * @public
     */
    description: string;

    /**
     * @description –ö–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
     * @default false
     * @readonly
     * @public
     */
    owner?: boolean;

    /**
     * @description –ü—Ä–∞–≤–∞ –±–æ—Ç–∞
     * @default null
     * @readonly
     * @public
     */
    permissions?: PermissionResolvable[];

    /**
     * @description –û–ø—Ü–∏–∏ –¥–ª—è slashCommand
     * @default null
     * @readonly
     * @public
     */
    options?: ApplicationCommandOption[];

    /**
     * @description –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     * @default null
     * @readonly
     * @public
     */
    execute: (message: ClientMessage | ClientInteraction, args?: string[]) => Promise<IActionMessage> | IActionMessage | void;
}

/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π
 * @interface Event
 */
export interface Event<T extends keyof ClientEvents | keyof CollectionAudioEvents | keyof AudioPlayerEvents> {
    /**
     * @description –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞
     * @default null
     * @readonly
     * @public
     */
    name: T extends keyof CollectionAudioEvents ? keyof CollectionAudioEvents : T extends keyof AudioPlayerEvents ? keyof AudioPlayerEvents : keyof ClientEvents;

    /**
     * @description –¢–∏–ø –∏–≤–µ–Ω—Ç–∞
     * @default null
     * @readonly
     * @public
     */
    type: T extends keyof CollectionAudioEvents | keyof AudioPlayerEvents ? "player" : "client";

    /**
     * @description –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–≤–µ–Ω—Ç–∞
     * @default null
     * @readonly
     * @public
     */
    execute: T extends keyof CollectionAudioEvents ? CollectionAudioEvents[T] : T extends keyof AudioPlayerEvents ? (queue: ArrayQueue, ...args: Parameters<AudioPlayerEvents[T]>) => any : T extends keyof ClientEvents ? (client: Atlas, ...args: ClientEvents[T]) => void : never;
}