import { ClientMessage, EmbedConstructor } from "@Client/Message";
import { DurationUtils } from "@Utils/Durations";
import { Platform } from "../../Platform";
import { Music } from "@db/Config.json";
import { ISong, Song } from "../Song";
import { Colors } from "discord.js";
import { WatKLOK } from "@Client";
import { Queue } from "../Queue";

//–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ EMBED –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Managers/Player/Messages)
export namespace EmbedMessages {
    /**
    * @description JSON<EMBED> –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
    * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
    */
    export function toPlaying(queue: Queue): EmbedConstructor {
        const { color, author, image, requester } = queue.song;
        const fields = getFields(queue);
        const AuthorSong = replaceText(author.title, 45, false);

        return {
            color, image: image.track, thumbnail: image.author, fields,
            author: { name: AuthorSong, url: author.url, iconURL: Music.note },
            footer: { text: `${requester.username} | ${DurationUtils.getTimeQueue(queue)} | üé∂: ${queue.songs.length}`, iconURL: requester.avatarURL() }
        };
    }
    //====================== ====================== ====================== ======================
    /**
     * @description JSON<EMBED> –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
     * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
     * @param color {Song<color>} –¶–≤–µ—Ç
     * @param song {Song} –¢—Ä–µ–∫ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
     * @param songs {Queue<songs>} –í—Å–µ —Ç—Ä–µ–∫–∏
     */
    export function toPushSong(song: Song, { songs }: Queue): EmbedConstructor {
        const { color, author, image, title, url, duration, requester } = song;
        const AuthorSong = replaceText(author.title, 45, false);
        const fields = [{ name: "**–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å**", value: `**‚ùØ** **[${replaceText(title, 40, true)}](${url}})\n**‚ùØ** \`\`[${duration.full}]\`\`**` }];

        return {
            color, fields, thumbnail: image.track,
            author: { name: AuthorSong, iconURL: image.author.url, url: author.url },
            footer: { text: `${requester.username} | ${DurationUtils.getTimeQueue(songs)} | üé∂: ${songs.length}`, iconURL: requester.avatarURL() }
        };
    }
    //====================== ====================== ====================== ======================
    /**
     * @description JSON<EMBED> –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–∞
     * @param client {WatKLOK} –ë–æ—Ç
     * @param DisAuthor {ClientMessage.author} –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param playlist {ISong.playlist} –ü–ª–µ–π–ª–∏—Å—Ç
     * @param author {ISong.author} –ê–≤—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞
     */
    export function toPushPlaylist({ author: DisAuthor }: ClientMessage, playlist: ISong.playlist): EmbedConstructor {
        const { author, image, url, title, items } = playlist;

        return {
            color: Colors.Blue, timestamp: new Date(),
            author: { name: author?.title, url: author?.url },
            thumbnail: { url: author?.image?.url ?? Music.note },
            image: typeof image === "string" ? { url: image } : image ?? { url: Music.note },
            fields: [{ name: `**–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç**`, value: `**‚ùØ** **[${title}](${url})**\n**‚ùØ** **–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${playlist.items.length}**` }],
            footer: { text: `${DisAuthor.username} | ${DurationUtils.getTimeQueue(items)} | üé∂: ${items?.length}`, iconURL: DisAuthor.displayAvatarURL({}) }
        };
    }
    //====================== ====================== ====================== ======================
    /**
    * @description JSON<EMBED> –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
    * @param color {Song<color>} –¶–≤–µ—Ç
    * @param songs {Queue<songs>} –í—Å–µ —Ç—Ä–µ–∫–∏
    * @param err {Error} –û—à–∏–±–∫–∞ –≤—ã–¥–∞–Ω–Ω–∞—è –ø–ª–µ–µ—Ä–æ–º
    */
    export function toError(client: WatKLOK, { songs, song }: Queue, err: Error | string): EmbedConstructor {
        const { color, author, image, title, url, requester } = song;
        const AuthorSong = replaceText(author.title, 45, false);

        return {
            color, thumbnail: image.track, timestamp: new Date(),
            description: `\n[${title}](${url})\n\`\`\`js\n${err}...\`\`\``,
            author: { name: AuthorSong, url: author.url, iconURL: image.author.url },
            footer: { text: `${requester.username} | ${DurationUtils.getTimeQueue(songs)} | üé∂: ${songs.length}`, iconURL: requester?.avatarURL() ?? client.user.displayAvatarURL() }
        };
    }
    //====================== ====================== ====================== ======================
    /**
     * @description JSON<Embed> –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
     * @param tracks {inTracks[]} –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
     * @param platform {platform} –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º
     * @param author {message.author} –ê–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
     */
    export function toSearch(tracks: ISong.track[], platform: string, author: ClientMessage["author"]): EmbedConstructor {
        return {
            color: Platform.color(platform as any),
            title: `–ù–∞–π–¥–µ–Ω–æ ${tracks.length}`,
            footer: { text: `${author.username} | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}`, iconURL: author.avatarURL() },
            timestamp: new Date(),

            fields: tracks.map((track, index) => {
                const duration = platform === "YOUTUBE" ? track.duration.seconds : DurationUtils.ParsingTimeToString(parseInt(track.duration.seconds));
                const title = `[${replaceText(track.title, 80, true)}](${track.url})`; //–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                const author = `${replaceText(track.author.title, 30, true)}`; //–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞

                index++;

                return {
                    name: `${index}: _${author} | ${duration ?? "LIVE"}_`,
                    value: `__**‚ùØ** ${title}__\n`
                }
            }),
        };
    }
}


//====================== ====================== ====================== ======================
/*                                   Function for toPlay                                   */
//====================== ====================== ====================== ======================
/**
 * @description –°–æ–∑–¥–∞–µ–º Message<Fields>
 * @param queue {Queue} –û—á–µ—Ä–µ–¥—å
 * @param client {WatKLOK} –ö–ª–∏–µ–Ω—Ç
 */
function getFields(queue: Queue): EmbedConstructor["fields"] {
    const { songs, song, player } = queue;
    const VisualDuration = toString(song.duration, player.streamDuration);

    //–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    const fields = [{ name: `**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç**`, value: `**‚ùØ** **[${replaceText(song.title, 29, true)}](${song.url})**\n${VisualDuration}` }];

    //–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    if (songs.length > 1) fields.push({ name: `**–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫**`, value: `**‚ùØ** **[${replaceText(songs[1].title, 29, true)}](${songs[1].url})**` });
    return fields;
}
//====================== ====================== ====================== ======================
/**
 * @description –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–∫–∞ –¥–ª—è embed —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param duration
 * @param playDuration
 */
function toString(duration: { seconds: number, full: string }, playDuration: number): string {
    if (duration.full === "Live" || !Music.ProgressBar.enable) return `\`\`[${duration}]\`\``;

    const parsedDuration = DurationUtils.ParsingTimeToString(playDuration);
    const progress = matchBar(playDuration, duration.seconds);
    const string = `**‚ùØ** \`\`[${parsedDuration} \\ ${duration.full}]\`\``;

    return `${string}\n\`\`${progress}\`\``;
}
//====================== ====================== ====================== ======================
/**
 * @description –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
 * @param currentTime {number} –¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º—è
 * @param maxTime {number} –ú–∞–∫—Å –≤—Ä–µ–º–µ–Ω–∏
 * @param size {number} –ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
 */
function matchBar(currentTime: number, maxTime: number, size: number = 25): string {
    try {
        const CurrentDuration = isNaN(currentTime) ? 0 : currentTime;
        const progressSize = Math.round(size * (CurrentDuration / maxTime));
        const progressText = Music.ProgressBar.full.repeat(progressSize);
        const emptyText = Music.ProgressBar.empty.repeat(size - progressSize);

        return `${progressText}${Music.ProgressBar.button}${emptyText}`;
    } catch (err) {
        if (err === "RangeError: Invalid count value") return "**‚ùØ** \`\`[Error value]\`\`";
        return "**‚ùØ** \`\`[Loading]\`\`";
    }
}
//====================== ====================== ====================== ======================
/**
 * @description –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 * @param text {string} –¢–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å
 * @param value {number} –î–æ —Å–∫–æ–ª—å–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
 * @param clearText {boolean} –ù–∞–¥–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç [\[,\]}{"`'*]()
 */
function replaceText(text: string, value: number | any, clearText: boolean = false): string {
    try {
        if (clearText) text = text.replace(/[\[,\]}{"`'*]()/gi, "");
        if (text.length > value && value !== false) return `${text.substring(0, value)}...`;
        return text;
    } catch { return text; }
}