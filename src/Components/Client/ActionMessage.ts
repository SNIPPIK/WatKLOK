import {ClientMessage} from "@handler/Events/Client/interactionCreate";
import {Colors, CommandInteraction, MessageReaction} from "discord.js";
import {ActionType} from "@handler";
/**
 * @author SNIPPIK
 * @class ActionMessageBase
 * @description –ë–∞–∑–∞ –∫–ª–∞—Å—Å–∞ ActionMessage
 */
class ActionMessageBase {
    protected readonly _options: ActionType.content | ActionType.embeds | ActionType.menu;
    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return Promise<ClientMessage>
     */
    protected get channel(): Promise<ClientMessage> {
        const {message, replied} = this._options;

        if ("replied" in message && !(message as any).replied && !replied) {
            if (message.isRepliable()) return message.reply(this.messageOptions);
            return message.followUp(this.messageOptions);
        }

        return message.channel.send(this.messageOptions) as Promise<ClientMessage>;
    };

    /**
     * @description –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return object
     */
    protected get messageOptions() {
        return { // @ts-ignore
            content: this._options.content, embeds: this._options?.embeds,
            fetchReply: true, components: this._options.components as any
        };
    };

    /**
     * @description –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
     * @param message {ClientMessage}
     * @return void
     */
    private _createMenu = (message: ClientMessage) => {
        let {page, pages, callback} = this._options as ActionType.menu;

        for (const [key, emoji] of Object.entries({ back: "‚¨ÖÔ∏è", cancel: "üóë", next: "‚û°Ô∏è" })) {
            message.react(emoji).then(() => {
                message.createReactionCollector({
                    filter: (reaction, user) => reaction.emoji.name === emoji && user.id !== message.client.user.id,
                    time: 60e3
                }).on("collect", ({users}: MessageReaction): void => {
                    users.remove(this._options.message.author).catch(() => null);

                    //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (key === "cancel") ActionMessage.delete = {message, time: 2e3};

                    //–ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    else if (page === pages.length || page < 1) return;

                    //–í—ã–±–∏—Ä–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å—Ç—Ä–∞–Ω–∏—á–∫–æ–π, –ø—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥
                    else if (key === "next") page++;
                    else page--;

                    //–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    return callback(message, pages, page);
                });
            });
        }
    };

    public constructor(options: ActionType.content | ActionType.embeds | ActionType.menu) {
        //–°–æ–∑–¥–∞–µ–º Embed —Å–æ–æ–±—â–µ–Ω–∏–µ
        if ("content" in options && !("page" in options)) {
            const {color, content, codeBlock, message, time, replied, promise, components} = options;

            options = { message, time: time, replied, promise, components,
                embeds: [{
                    color: typeof color === "number" ? color : Colors[color] ?? 258044,
                    description: codeBlock ? `\`\`\`${codeBlock}\n${content}\n\`\`\`` : content
                }]
            }
        }
        this._options = options;

        this.channel.then((message) => {
            const {time, promise} = this._options;

            if (!message) return;
            //–ï—Å–ª–∏ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ
            if (promise) promise(message);

            //–ï—Å–ª–∏ –º–µ–Ω—é, —Ç–æ –Ω–µ –Ω–∞–¥–æ —É–¥–∞–ª—è—Ç—å
            if ("page" in options) this._createMenu(message);
            else if (time !== 0) ActionMessage.delete = {message, time};
        }).catch((err): void => void process.emit("uncaughtException", err));
    };
}

/**
 * @author SNIPPIK
 * @class ActionMessage
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª Discord
 */
export class ActionMessage extends ActionMessageBase {
    /**
     * @description –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
     * @param options
     */
    public static set delete(options: { message: CommandInteraction | ClientMessage, time?: number }) {
        const {message, time} = options;

        //–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if ("deletable" in message && message.deletable) {
            setTimeout(() => message.delete().catch(() => {
            }), time ?? 15e3);

            //–£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        } else if ("replied" in message && !(message as any).replied) {
            setTimeout(() => (message as CommandInteraction)?.deleteReply().catch(() => {
            }), time ?? 15e3);
        }
    };
}