import {CommandInteractionOption, Events, PermissionsBitField} from "discord.js";
import {Constructor, Handler} from "@handler";
import {Client} from "@lib/discord";
import {Logger} from "@env";
import {db} from "@lib/db";

/**
 * @author SNIPPIK
 * @description –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ —Å slash commands, buttons
 * @class InteractionCreate
 */
class Interaction extends Constructor.Assign<Handler.Event<Events.InteractionCreate>> {
    public constructor() {
        super({
            name: Events.InteractionCreate,
            type: "client",
            execute: (_, message: any) => {
                //–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
                if ((message.user || message?.member?.user).bot) return;

                //console.log(message);

                //–ü–æ–¥–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                message.author = message?.member?.user ?? message?.user;

                const status = message?.isCommand() ? true : message?.isButton() ? false : null;

                if (status || status === false) {
                    const item = (status ? Interaction._stepCommand : Interaction._stepButton)(message);

                    //–ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                    if (item) {
                        if (item instanceof Promise) {
                            item.then(data => new Constructor.message<any>({...data, message})).catch((err) => Logger.log("ERROR", err));
                            return;
                        }
                        new Constructor.message<any>({...item as any, message});
                    }
                }
            }
        });
    }

    /**
     * @description –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
     * @param message - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
     * @readonly
     * @private
     */
    private static _stepCommand = (message: Client.interact) => {
        const {author, guild} = message;
        const group = db.commands.get([message.commandName, message.options._group]);

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
        if (!message.guild) return {
            content: `${author}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞!`,
            color: "DarkRed"
        };

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        else if (group?.owner && !db.owners.includes(author.id)) return {
            content: `${author}, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!`,
            color: "DarkRed"
        };

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (group?.permissions) {
            //–ï—Å–ª–∏ –ø—Ä–∞–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const clientPermissions = this._checkPermission(group.permissions, message.channel.permissionsFor(guild.members.me));
            if (clientPermissions) return {
                content: `${author.username}, —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞: ${clientPermissions}`,
                color: "DarkRed", codeBlock: "css"
            };
        }

        if (!group?.execute) return { content: `${author.username}, —É –º–µ–Ω—è –Ω–µ—Ç —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!`, color: "DarkRed", codeBlock: "css" };

        const options = message.options;
        return group.execute({
            message,
            args: options?._hoistedOptions?.map((f: CommandInteractionOption) => `${f.value}`),
            group: options._group, sub: options._subcommand
        });
    };

    /**
     * @description –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ID –∫–Ω–æ–ø–∫–∏
     * @param message - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
     * @readonly
     * @private
     */
    private static _stepButton = (message: Client.interact) => {
        const { author, member, guild } = message;
        const queue = db.audio.queue.get(message.guild.id);

        //–ï—Å–ª–∏ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–∏
        if (!queue) return { content: `${author} | –ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç`, color: "Yellow" };

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º
        else if (!member?.voice?.channel || !member?.voice) return { content: `${author} | –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!`, color: "Yellow" };

        //–ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–º—É –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        else if (queue && queue.voice && member?.voice?.channel?.id !== queue.voice.id && guild.members.me.voice.channel) return {
            content: `${author} | –ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!\n–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—É—Ç <#${queue.voice.id}>`, color: "Yellow"
        };

        switch (message.customId) {
            //–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ—à–ª–æ–≥–æ —Ç—Ä–µ–∫–∞
            case "last": {
                //–ï—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ç—Ä–µ–∫
                if (queue.songs.size < 2) return { content: `${message.author}, –Ω–æ –∏–≥—Ä–∞–µ—Ç –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ç—Ä–µ–∫!`, color: "Yellow" };

                else if (queue.songs.length > 1) {
                    const index = 0 ?? queue.songs.length - 1;

                    queue.songs[0] = queue.songs[index];
                    queue.songs[index] = queue.songs.song;
                }

                //–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
                queue.player.stop();
                return { content: `${message.author}, –ø—Ä–æ—à–ª—ã–π —Ç—Ä–µ–∫ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω!`, color: "Green" };
            }

            //–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
            case "shuffle": {
                if (queue.songs.size < 2) return { content: `${message.author}, –Ω–æ –∏–≥—Ä–∞–µ—Ç –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ç—Ä–µ–∫!`, color: "Yellow" };
                queue.shuffle = !queue.shuffle;

                return { content: `${message.author}, –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ —Ç—Ä–µ–∫–æ–≤ ${queue.shuffle ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–≤—ã–∫–ª—é—á–µ–Ω–∞"}!`, color: "Green" };
            }

            //–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
            case "skip": return db.commands.get("queue").execute({message, args: ["1"], sub: "skip"});

            //–ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞
            case "repeat": {
                const loop = queue.repeat;

                if (loop === "off") {
                    queue.repeat = "songs";
                    return { content: `üîÅ | –ü–æ–≤—Ç–æ—Ä –≤—Å–µ–π –º—É–∑—ã–∫–∏`, codeBlock: "css"};
                } else if (loop === "songs") {
                    queue.repeat = "song";
                    return { content: `üîÇ | –ü–æ–≤—Ç–æ—Ä  | ${queue.songs[0].title}`, codeBlock: "css"};
                }

                queue.repeat = "off";
                return { content: `‚ùå | –ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω`, codeBlock: "css"};
            }

            //–ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
            case "resume_pause": {
                //–ï—Å–ª–∏ –ø–ª–µ–µ—Ä –∏–≥—Ä–∞–µ—Ç
                if (queue.player.status === "player/playing") return db.commands.get("player").execute({message, sub: "pause"});

                //–ï—Å–ª–∏ –ø–ª–µ–µ—Ä —Å—Ç–æ–∏—Ç –Ω–∞ –ø–∞—É–∑–µ
                else if (queue.player.status === "player/pause") return db.commands.get("player").execute({message, sub: "resume"});

                //–ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ —Å —á–µ–º
                return { content: `${message.author}, –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ, –ø–∞—É–∑—É –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å!`, color: "Yellow" };
            }
        }

        //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—à–µ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
        return { content: `${author} | –û—Ç–∫—É–¥–∞ —Ç—ã –≤–∑—è–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É!`, color: "DarkRed" }
    };

    /**
     * @description –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param permissions - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
     * @param Fields - –ì–¥–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
     * @readonly
     * @private
     */
    private static _checkPermission = (permissions: Handler.Command["permissions"], Fields: Readonly<PermissionsBitField>) => {
        const fail: any[] = [];

        if (permissions && permissions?.length > 0) {
            for (const permission of permissions) {
                if (!Fields.has(permission)) fail.push(permission);
            }

            return fail.join(", ");
        }

        return null;
    };
}

/**
 * @export default
 * @description –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
 */
export default Object.values({Interaction});