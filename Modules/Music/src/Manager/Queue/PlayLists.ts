import {DiscordAPIError, VoiceChannel} from "discord.js";
import {Song} from "./Structures/Song";
import {AsyncFullTimeSongs} from "../Functions/FullTimeSongs";
import {EmbedConstructor, InputPlaylist, InputTrack, wMessage} from "../../../../../Core/Utils/TypesHelper";
import {Colors} from "../../../../../Core/Utils/Colors";
import {NotImage} from "../../Events/Message/Constructor/Helper";
import {PushSong} from "./CreateQueue";

//====================== ====================== ====================== ======================
/**
 * @description –î–æ–±–∞–≤–ª—è–µ—Ç –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
 * @param message {wMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param playlist {object} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
 * @param VoiceChannel {VoiceChannel} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
 */
export async function PlayList(message: wMessage, playlist: InputPlaylist, VoiceChannel: VoiceChannel): Promise<void> {
    if (!playlist.items) return message.client.Send({text: `${message.author}, –Ø –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç, –û—à–∏–±–∫–∞: –ó–¥–µ—Å—å –±–æ–ª—å—à–µ 100 —Ç—Ä–µ–∫–æ–≤, youtube –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–¥–µ–ª–∞—Ç—å –º–Ω–µ —Å—Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤!`, message: message, color: "RED"});

    SendMessage(message, playlist).catch(async (err: DiscordAPIError) => console.log(`[Discord Error]: [Send message]: ${err}`));
    return addSongsQueue(playlist.items, message, VoiceChannel);
}
//====================== ====================== ====================== ======================

/**
 * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param message {wMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param playlist {object} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
 */
async function SendMessage(message: wMessage, playlist: InputPlaylist): Promise<NodeJS.Timeout> {
   return message.channel.send({embeds: [await PlaylistEmbed(message, playlist, Colors.BLUE)]}).then(async (msg: wMessage) => setTimeout(() => msg.delete().catch(() => null), 15e3));
}
//====================== ====================== ====================== ======================

/**
 * @description –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
 * @param playlistItems {any[]} –°–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param message {wMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @param VoiceChannel {VoiceChannel} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
 */
async function addSongsQueue(playlistItems: InputTrack[], message: wMessage, VoiceChannel: VoiceChannel): Promise<void> {
    const {player} = message.client;
    let queue = message.client.queue.get(message.guild.id)

    return playlistItems.forEach((track: InputTrack) => setTimeout(async () => {
        if (!queue) {
            void player.emit('play', message, VoiceChannel, track);
            queue = message.client.queue.get(message.guild.id);
            return;
        }

        return PushSong(queue, new Song(track, message), false);
    }, 2e3));
}
//====================== ====================== ====================== ======================

/**
 * @description –°–æ–∑–¥–∞–µ–º Embed —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
 * @param client {wClient} –ë–æ—Ç
 * @param DisAuthor {wMessage.author} –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param author {InputPlaylist.author} –ê–≤—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param image {InputPlaylist.image} –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param url {InputPlaylist.url} –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç
 * @param title {InputPlaylist.title} –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param items {InputPlaylist.items} –¢—Ä–µ–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
 * @param color {number} –¶–≤–µ—Ç –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ embed
 */
async function PlaylistEmbed({client, author: DisAuthor}: wMessage, {author, image, url, title, items}: InputPlaylist, color: number): Promise<EmbedConstructor> {
    return {
        color,
        author: {
            name: author?.title,
            iconURL: author?.image?.url ?? client.user.displayAvatarURL(),
            url: author?.url,
        },
        thumbnail: {
            url: typeof image === "string" ? image : image.url ?? NotImage
        },
        description: `–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç [${title}](${url})`,
        timestamp: new Date(),
        footer: {
            text: `${DisAuthor.username} | ${await AsyncFullTimeSongs(items)} | üé∂: ${items?.length}`,
            iconURL: DisAuthor.displayAvatarURL({}),
        }
    };
}
//====================== ====================== ====================== ======================