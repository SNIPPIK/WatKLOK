import {ColorResolvable, HexColorString, MessageEmbed} from "discord.js";
import {Song} from "./Constructors/Song";
import {FullTimeSongs} from "../Functions/FullTimeSongs";
import {VoiceConnection} from "@discordjs/voice";
import {W_Message, playlist} from "../../../../../Core/Utils/W_Message";

export class PlayList {
    /**
     * @description –î–æ–±–∞–≤–ª—è–µ—Ç –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
     * @param message {W_Message} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param playlist {object} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
     * @param VoiceConnection {VoiceConnection} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
     */
    public pushItems = async (message: W_Message, playlist: playlist, VoiceConnection: VoiceConnection): Promise<void> => {
        if (!playlist.items) return message.client.Send({text: `${message.author}, –Ø –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç, –û—à–∏–±–∫–∞: –ó–¥–µ—Å—å –±–æ–ª—å—à–µ 100 —Ç—Ä–µ–∫–æ–≤, youtube –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–¥–µ–ª–∞—Ç—å –º–Ω–µ —Å—Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤!`, message: message, color: "RED"});

        this.SendMessage(message, playlist).catch(async (err: Error) => console.log(`[Discord Error]: [Send message]: ${err}`));
        return this.addSongsQueue(playlist.items, message, VoiceConnection);
    }
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–ª–µ–π–ª–∏—Å—Ç–∞
     * @param message {W_Message} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param playlist {object} –°–∞–º –ø–ª–µ–π–ª–∏—Å—Ç
     */
    private SendMessage = async (message: W_Message, playlist: playlist): Promise<NodeJS.Timeout> => message.channel.send({embeds: [new PlaylistEmbed(message, playlist, '#03fcdf')]}).then(async (msg) => setTimeout(() => msg.delete().catch(() => null), 15e3));
    /**
     * @description –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
     * @param playlistItems {any[]} –°–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
     * @param message {W_Message} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param VoiceConnection {VoiceConnection} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
     */
    private addSongsQueue = async (playlistItems: any[], message: W_Message, VoiceConnection: VoiceConnection): Promise<void> => {
        let {queue, player} = message.client;

        return playlistItems.forEach((track) => setTimeout(async () => {
            if (!queue.get(message.guild.id)) return player.emit('play', message, VoiceConnection, track);
            return message.client.queue.get(message.guild.id).events.queue.emit('pushSong', new Song(track, message), message);
        }, 2e3));
    }
}

class PlaylistEmbed extends MessageEmbed {
    constructor(message: W_Message, {author, thumbnail, url, title, items}: playlist, color: HexColorString | ColorResolvable) {
        super({
            color: color,
            author: {
                name: author?.name || author?.title,
                icon_url: author?.thumbnails?.url || message.client.user.displayAvatarURL(),
                url: author?.url,
            },
            thumbnail: {
                url: !thumbnail?.url ? thumbnail : thumbnail?.url,
            },
            description: `–ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç [${title}](${url})`,
            timestamp: new Date(),
            footer: {
                text: `${message.author.username} | ${FullTimeSongs(items)} | üé∂: ${items?.length}`,
                icon_url: message.author.displayAvatarURL({}),
            }
        });
    };
}