import {TypedEmitter} from "tiny-typed-emitter";
import {Song} from "../../Manager/Queue/Structures/Song";
import {wMessage} from "../../../../../Core/Utils/TypesHelper";
import {VoiceManager} from "../../Manager/Voice/Voice";
import {Queue} from "../../Manager/Queue/Structures/Queue";

type EventsQueue = {
    DestroyQueue: (queue: Queue, message: wMessage, sendDelQueue?: boolean) => Promise<NodeJS.Timeout>,
    pushSong: (song: Song, message: wMessage) => Promise<number | null>
};
export type Queue_Events = Queue["events"];
export type Queue_Channels = Queue["channels"];
export type Queue_Options = Queue["options"];

export class QueueEvents extends TypedEmitter<EventsQueue> {
    public constructor() {
        super();
        this.on('DestroyQueue', QueueEvents.onDestroyQueue);
        this.on('pushSong', QueueEvents.onPushSong);
        this.setMaxListeners(2);
    };
    /**
     * @description –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
     * @param song {object}
     * @param message {object}
     */
    protected static onPushSong = async (song: Song, {client, guild}: wMessage): Promise<number | null> => {
        const queue: Queue = client.queue.get(guild.id);
        return queue ? queue.songs.push(song) : null;
    };
    /**
     * @description –£–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
     * @param queue {object} –û—á–µ—Ä–µ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
     * @param message {object} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param sendDelQueue {boolean} –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
     */
    protected static onDestroyQueue = async (queue: Queue, message: wMessage, sendDelQueue: boolean = true): Promise<NodeJS.Timeout> => {
        if (!queue) return null;

        await this.DeleteMessage(queue.channels);
        await this.LeaveVoice(queue?.channels?.message?.guild.id);
        await this.DestroyEvents(queue?.events);
        await this.CleanPlayer(queue);
        if (sendDelQueue) await this.SendChannelToEnd(queue.options, message);

        queue.songs = [];
        return this.DeleteQueue(message);
    };
    /**
     * @description –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ player
     * @param queue {Queue}
     */
    protected static CleanPlayer = async (queue: Queue): Promise<void> => {
        if (queue.player.state.resource) void queue.player.state.resource.playStream.emit('close');

        queue.player?.stop();
        return;
    };
    /**
     * @description –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     * @param GuildID {string} ID —Å–µ—Ä–≤–µ—Ä–∞
     */
    protected static LeaveVoice = async (GuildID: string): Promise<void> => new VoiceManager().Disconnect(GuildID);
    /**
     * @description –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–µ
     * @param channels {Queue_Channels} –í—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     */
    protected static DeleteMessage = async ({message}: Queue_Channels): Promise<NodeJS.Timeout> => setTimeout(async () => message?.deletable ? message?.delete().catch(() => undefined) : null, 3e3);
    /**
     * @description –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –º—É–∑—ã–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
     * @param options {Queue_Options} –û–ø—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param message {wMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    protected static SendChannelToEnd = async ({stop}: Queue_Options, message: wMessage): Promise<void> => {
        if (stop) return message.client.Send({text: `üéµ | –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞`, message: message, type: 'css'});
        return message.client.Send({text: `üéµ | –ú—É–∑—ã–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å`, message: message, type: 'css'});
    };
    /**
     * @description –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
     * @param message {wMessage} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    protected static DeleteQueue = async (message: wMessage): Promise<NodeJS.Timeout> => setTimeout(async () => {
        message.client.console(`[GuildQueue]: [Delete]: [${message.guild.id}]`);
        return message.client.queue.delete(message.guild.id);
    }, 1);
    /**
     * @description –£–¥–∞–ª—è–µ–º –∏–≤–µ–Ω—Ç—ã (–Ω–µ –∂–¥–µ–º –ø–æ–∫–∞ Node.js —Å–∞–º–∞ —Å–æ –≤—Å–µ–º —Å–ø—Ä–∞–≤–∏—Ç—Å—è, –ø–∞–º—è—Ç—å –Ω—É–∂–Ω–∞ –≤—Å–µ–≥–¥–∞)
     * @param events {Queue_Events} –ò–≤–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏
     */
    protected static DestroyEvents = async ({message, queue, helper}: Queue_Events): Promise<void> => {
        //Destroy Message events
        message = null;
        //Destroy Voice events
        helper = null;
        //Destroy Queue events
        queue = null;
    };
}