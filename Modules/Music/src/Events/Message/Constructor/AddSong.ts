import {FullTimeSongs} from "../../../Manager/Functions/FullTimeSongs";
import {Song} from "../../../Manager/Queue/Structures/Song";
import {Queue} from "../../../Manager/Queue/Structures/Queue";
import {EmbedConstructor, wClient} from "../../../../../../Core/Utils/TypesHelper";
import {NotFound, NotImage, NotVer, Ver} from "./Helper";

/**
 * @description Embed —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
 * @param client {wClient} –ö–ª–∏–µ–Ω—Ç
 * @param color {Song<color>} –¶–≤–µ—Ç
 * @param author {Song<author>} –ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞
 * @param image {Song<image>} –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ç—Ä–µ–∫–∞
 * @param title {Song<title>} –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
 * @param url {Song<url>} –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫
 * @param duration {Song<duration>} –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
 * @param requester {Song<requester>} –ö—Ç–æ –≤–∫–ª—é—á–∏–ª —Ç—Ä–µ–∫
 * @param songs {Queue<songs>} –í—Å–µ —Ç—Ä–µ–∫–∏
 */
export async function AddSong(client: wClient, {color, author, image, title, url, duration, requester}: Song, {songs}: Queue): Promise<EmbedConstructor> {
    return {
        color,
        author: {
            name: client.ConvertedText(author.title, 45, false),
            iconURL: author.isVerified === undefined ? NotFound : author.isVerified ? Ver : NotVer,
            url: author.url,
        },
        thumbnail: {
            url: !image?.url ? author?.image.url : image?.url ?? NotImage,
        },
        fields: [{
            name: `–î–æ–±–∞–≤–ª–µ–Ω–æ`,
            value: `**‚ùØ** [${client.ConvertedText(title, 40, true)}](${url}})\n**‚ùØ** [${duration.StringTime}]`
        }],
        //timestamp: new Date(),
        footer: {
            text: `${requester.username} | ${FullTimeSongs(songs)} | üé∂: ${songs.length}`,
            iconURL: requester.displayAvatarURL(),
        }
    }
}